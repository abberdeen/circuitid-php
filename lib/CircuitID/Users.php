<?php
/**
 * Users
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!  # Clients  Discover the convenience of Circuit ID's readily available Client API libraries, enabling you to initiate seamless integration without delay. These pre-built libraries are designed for immediate use, empowering you to leverage the API's functionalities effortlessly. Get started with a Circuit ID&reg; Client library and streamline your development process today.  - <a href='https://github.com/circuitid/circuitid-node' target='_blank'>Node</a> - <a href='https://github.com/circuitid/circuitid-python' target='_blank'>Python</a> - <a href='https://github.com/circuitid/circuitid-java' target='_blank'>Java</a> - <a href='https://github.com/circuitid/circuitid-csharp' target='_blank'>C Sharp</a> - <a href='https://github.com/circuitid/circuitid-ruby' target='_blank'>Ruby</a> - <a href='https://github.com/circuitid/circuitid-go' target='_blank'>Go</a>
 *
 * The version of the OpenAPI document: 0.47.14
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Users Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Users implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'users';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'mixed',
        'password' => 'mixed',
        'sipPassword' => 'mixed',
        'turnPassword' => 'mixed',
        'first' => 'mixed',
        'last' => 'mixed',
        'mobilePhone' => 'mixed',
        'businessPhone' => 'mixed',
        'extension' => 'mixed',
        'customCallerId' => 'mixed',
        'jobTitle' => 'mixed',
        'department' => 'mixed',
        'office' => 'mixed',
        'avatar' => 'mixed',
        'language' => 'mixed',
        'isPrimary' => 'mixed',
        'status' => 'mixed',
        'vmGreetingType' => 'mixed',
        'vmTimeout' => 'mixed',
        'vmFile' => 'mixed',
        'vmPlaybackNumber' => 'mixed',
        'pin' => 'mixed',
        'number' => 'mixed',
        'region' => 'mixed',
        'callerIdNumber' => 'mixed',
        'adminPermission' => 'mixed',
        'billingPermission' => 'mixed',
        'phonePermission' => 'mixed',
        'agilePermission' => 'mixed',
        'jobServerPermission' => 'mixed',
        'mediaServerPermission' => 'mixed',
        'mailServerPermission' => 'mixed',
        'superAdminPermission' => 'mixed',
        'timezone' => 'mixed',
        'vmTranscription' => 'mixed',
        'communication' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'password' => null,
        'sipPassword' => null,
        'turnPassword' => null,
        'first' => null,
        'last' => null,
        'mobilePhone' => null,
        'businessPhone' => null,
        'extension' => 'int32',
        'customCallerId' => 'int32',
        'jobTitle' => null,
        'department' => null,
        'office' => null,
        'avatar' => null,
        'language' => null,
        'isPrimary' => 'int32',
        'status' => null,
        'vmGreetingType' => null,
        'vmTimeout' => 'int32',
        'vmFile' => null,
        'vmPlaybackNumber' => null,
        'pin' => 'int32',
        'number' => null,
        'region' => null,
        'callerIdNumber' => null,
        'adminPermission' => null,
        'billingPermission' => null,
        'phonePermission' => null,
        'agilePermission' => null,
        'jobServerPermission' => null,
        'mediaServerPermission' => null,
        'mailServerPermission' => null,
        'superAdminPermission' => null,
        'timezone' => null,
        'vmTranscription' => 'int32',
        'communication' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => true,
		'password' => true,
		'sipPassword' => true,
		'turnPassword' => true,
		'first' => true,
		'last' => true,
		'mobilePhone' => true,
		'businessPhone' => true,
		'extension' => true,
		'customCallerId' => true,
		'jobTitle' => true,
		'department' => true,
		'office' => true,
		'avatar' => true,
		'language' => true,
		'isPrimary' => true,
		'status' => true,
		'vmGreetingType' => true,
		'vmTimeout' => true,
		'vmFile' => true,
		'vmPlaybackNumber' => true,
		'pin' => true,
		'number' => true,
		'region' => true,
		'callerIdNumber' => true,
		'adminPermission' => true,
		'billingPermission' => true,
		'phonePermission' => true,
		'agilePermission' => true,
		'jobServerPermission' => true,
		'mediaServerPermission' => true,
		'mailServerPermission' => true,
		'superAdminPermission' => true,
		'timezone' => true,
		'vmTranscription' => true,
		'communication' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'password' => 'password',
        'sipPassword' => 'sipPassword',
        'turnPassword' => 'turnPassword',
        'first' => 'first',
        'last' => 'last',
        'mobilePhone' => 'mobilePhone',
        'businessPhone' => 'businessPhone',
        'extension' => 'extension',
        'customCallerId' => 'customCallerId',
        'jobTitle' => 'jobTitle',
        'department' => 'department',
        'office' => 'office',
        'avatar' => 'avatar',
        'language' => 'language',
        'isPrimary' => 'isPrimary',
        'status' => 'status',
        'vmGreetingType' => 'vmGreetingType',
        'vmTimeout' => 'vmTimeout',
        'vmFile' => 'vmFile',
        'vmPlaybackNumber' => 'vmPlaybackNumber',
        'pin' => 'pin',
        'number' => 'number',
        'region' => 'region',
        'callerIdNumber' => 'callerIdNumber',
        'adminPermission' => 'adminPermission',
        'billingPermission' => 'billingPermission',
        'phonePermission' => 'phonePermission',
        'agilePermission' => 'agilePermission',
        'jobServerPermission' => 'jobServerPermission',
        'mediaServerPermission' => 'mediaServerPermission',
        'mailServerPermission' => 'mailServerPermission',
        'superAdminPermission' => 'superAdminPermission',
        'timezone' => 'timezone',
        'vmTranscription' => 'vmTranscription',
        'communication' => 'communication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'password' => 'setPassword',
        'sipPassword' => 'setSipPassword',
        'turnPassword' => 'setTurnPassword',
        'first' => 'setFirst',
        'last' => 'setLast',
        'mobilePhone' => 'setMobilePhone',
        'businessPhone' => 'setBusinessPhone',
        'extension' => 'setExtension',
        'customCallerId' => 'setCustomCallerId',
        'jobTitle' => 'setJobTitle',
        'department' => 'setDepartment',
        'office' => 'setOffice',
        'avatar' => 'setAvatar',
        'language' => 'setLanguage',
        'isPrimary' => 'setIsPrimary',
        'status' => 'setStatus',
        'vmGreetingType' => 'setVmGreetingType',
        'vmTimeout' => 'setVmTimeout',
        'vmFile' => 'setVmFile',
        'vmPlaybackNumber' => 'setVmPlaybackNumber',
        'pin' => 'setPin',
        'number' => 'setNumber',
        'region' => 'setRegion',
        'callerIdNumber' => 'setCallerIdNumber',
        'adminPermission' => 'setAdminPermission',
        'billingPermission' => 'setBillingPermission',
        'phonePermission' => 'setPhonePermission',
        'agilePermission' => 'setAgilePermission',
        'jobServerPermission' => 'setJobServerPermission',
        'mediaServerPermission' => 'setMediaServerPermission',
        'mailServerPermission' => 'setMailServerPermission',
        'superAdminPermission' => 'setSuperAdminPermission',
        'timezone' => 'setTimezone',
        'vmTranscription' => 'setVmTranscription',
        'communication' => 'setCommunication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'password' => 'getPassword',
        'sipPassword' => 'getSipPassword',
        'turnPassword' => 'getTurnPassword',
        'first' => 'getFirst',
        'last' => 'getLast',
        'mobilePhone' => 'getMobilePhone',
        'businessPhone' => 'getBusinessPhone',
        'extension' => 'getExtension',
        'customCallerId' => 'getCustomCallerId',
        'jobTitle' => 'getJobTitle',
        'department' => 'getDepartment',
        'office' => 'getOffice',
        'avatar' => 'getAvatar',
        'language' => 'getLanguage',
        'isPrimary' => 'getIsPrimary',
        'status' => 'getStatus',
        'vmGreetingType' => 'getVmGreetingType',
        'vmTimeout' => 'getVmTimeout',
        'vmFile' => 'getVmFile',
        'vmPlaybackNumber' => 'getVmPlaybackNumber',
        'pin' => 'getPin',
        'number' => 'getNumber',
        'region' => 'getRegion',
        'callerIdNumber' => 'getCallerIdNumber',
        'adminPermission' => 'getAdminPermission',
        'billingPermission' => 'getBillingPermission',
        'phonePermission' => 'getPhonePermission',
        'agilePermission' => 'getAgilePermission',
        'jobServerPermission' => 'getJobServerPermission',
        'mediaServerPermission' => 'getMediaServerPermission',
        'mailServerPermission' => 'getMailServerPermission',
        'superAdminPermission' => 'getSuperAdminPermission',
        'timezone' => 'getTimezone',
        'vmTranscription' => 'getVmTranscription',
        'communication' => 'getCommunication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LANGUAGE_FR = 'fr';
    public const LANGUAGE_EN = 'en';
    public const LANGUAGE_JA = 'ja';
    public const LANGUAGE_DE = 'de';
    public const LANGUAGE_ES = 'es';
    public const IS_PRIMARY__1 = '1';
    public const IS_PRIMARY__0 = '0';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_DISABLED = 'disabled';
    public const STATUS_TERMINATED = 'terminated';
    public const VM_GREETING_TYPE__DEFAULT = 'default';
    public const VM_GREETING_TYPE_MP3 = 'mp3';
    public const VM_GREETING_TYPE_NUMBER = 'number';
    public const ADMIN_PERMISSION_R = 'r';
    public const ADMIN_PERMISSION_RW = 'rw';
    public const ADMIN_PERMISSION_NULL = 'null';
    public const BILLING_PERMISSION_R = 'r';
    public const BILLING_PERMISSION_RW = 'rw';
    public const BILLING_PERMISSION_NULL = 'null';
    public const PHONE_PERMISSION_R = 'r';
    public const PHONE_PERMISSION_RW = 'rw';
    public const PHONE_PERMISSION_NULL = 'null';
    public const AGILE_PERMISSION_R = 'r';
    public const AGILE_PERMISSION_RW = 'rw';
    public const AGILE_PERMISSION_NULL = 'null';
    public const JOB_SERVER_PERMISSION_R = 'r';
    public const JOB_SERVER_PERMISSION_RW = 'rw';
    public const JOB_SERVER_PERMISSION_NULL = 'null';
    public const MEDIA_SERVER_PERMISSION_R = 'r';
    public const MEDIA_SERVER_PERMISSION_RW = 'rw';
    public const MEDIA_SERVER_PERMISSION_NULL = 'null';
    public const MAIL_SERVER_PERMISSION_R = 'r';
    public const MAIL_SERVER_PERMISSION_RW = 'rw';
    public const MAIL_SERVER_PERMISSION_NULL = 'null';
    public const SUPER_ADMIN_PERMISSION_R = 'r';
    public const SUPER_ADMIN_PERMISSION_RW = 'rw';
    public const SUPER_ADMIN_PERMISSION_NULL = 'null';
    public const VM_TRANSCRIPTION__1 = '1';
    public const VM_TRANSCRIPTION__0 = '0';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_FR,
            self::LANGUAGE_EN,
            self::LANGUAGE_JA,
            self::LANGUAGE_DE,
            self::LANGUAGE_ES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsPrimaryAllowableValues()
    {
        return [
            self::IS_PRIMARY__1,
            self::IS_PRIMARY__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_DISABLED,
            self::STATUS_TERMINATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVmGreetingTypeAllowableValues()
    {
        return [
            self::VM_GREETING_TYPE__DEFAULT,
            self::VM_GREETING_TYPE_MP3,
            self::VM_GREETING_TYPE_NUMBER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminPermissionAllowableValues()
    {
        return [
            self::ADMIN_PERMISSION_R,
            self::ADMIN_PERMISSION_RW,
            self::ADMIN_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingPermissionAllowableValues()
    {
        return [
            self::BILLING_PERMISSION_R,
            self::BILLING_PERMISSION_RW,
            self::BILLING_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhonePermissionAllowableValues()
    {
        return [
            self::PHONE_PERMISSION_R,
            self::PHONE_PERMISSION_RW,
            self::PHONE_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgilePermissionAllowableValues()
    {
        return [
            self::AGILE_PERMISSION_R,
            self::AGILE_PERMISSION_RW,
            self::AGILE_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobServerPermissionAllowableValues()
    {
        return [
            self::JOB_SERVER_PERMISSION_R,
            self::JOB_SERVER_PERMISSION_RW,
            self::JOB_SERVER_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaServerPermissionAllowableValues()
    {
        return [
            self::MEDIA_SERVER_PERMISSION_R,
            self::MEDIA_SERVER_PERMISSION_RW,
            self::MEDIA_SERVER_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMailServerPermissionAllowableValues()
    {
        return [
            self::MAIL_SERVER_PERMISSION_R,
            self::MAIL_SERVER_PERMISSION_RW,
            self::MAIL_SERVER_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuperAdminPermissionAllowableValues()
    {
        return [
            self::SUPER_ADMIN_PERMISSION_R,
            self::SUPER_ADMIN_PERMISSION_RW,
            self::SUPER_ADMIN_PERMISSION_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVmTranscriptionAllowableValues()
    {
        return [
            self::VM_TRANSCRIPTION__1,
            self::VM_TRANSCRIPTION__0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('sipPassword', $data ?? [], null);
        $this->setIfExists('turnPassword', $data ?? [], null);
        $this->setIfExists('first', $data ?? [], null);
        $this->setIfExists('last', $data ?? [], null);
        $this->setIfExists('mobilePhone', $data ?? [], null);
        $this->setIfExists('businessPhone', $data ?? [], null);
        $this->setIfExists('extension', $data ?? [], null);
        $this->setIfExists('customCallerId', $data ?? [], null);
        $this->setIfExists('jobTitle', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('office', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('isPrimary', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('vmGreetingType', $data ?? [], null);
        $this->setIfExists('vmTimeout', $data ?? [], null);
        $this->setIfExists('vmFile', $data ?? [], null);
        $this->setIfExists('vmPlaybackNumber', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('callerIdNumber', $data ?? [], null);
        $this->setIfExists('adminPermission', $data ?? [], null);
        $this->setIfExists('billingPermission', $data ?? [], null);
        $this->setIfExists('phonePermission', $data ?? [], null);
        $this->setIfExists('agilePermission', $data ?? [], null);
        $this->setIfExists('jobServerPermission', $data ?? [], null);
        $this->setIfExists('mediaServerPermission', $data ?? [], null);
        $this->setIfExists('mailServerPermission', $data ?? [], null);
        $this->setIfExists('superAdminPermission', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('vmTranscription', $data ?? [], null);
        $this->setIfExists('communication', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['email']) < 5)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 255)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['password']) < 8)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['sipPassword'] === null) {
            $invalidProperties[] = "'sipPassword' can't be null";
        }
        if ((mb_strlen($this->container['sipPassword']) > 45)) {
            $invalidProperties[] = "invalid value for 'sipPassword', the character length must be smaller than or equal to 45.";
        }

        if ((mb_strlen($this->container['sipPassword']) < 8)) {
            $invalidProperties[] = "invalid value for 'sipPassword', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['turnPassword']) && (mb_strlen($this->container['turnPassword']) > 45)) {
            $invalidProperties[] = "invalid value for 'turnPassword', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['turnPassword']) && (mb_strlen($this->container['turnPassword']) < 8)) {
            $invalidProperties[] = "invalid value for 'turnPassword', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['first'] === null) {
            $invalidProperties[] = "'first' can't be null";
        }
        if ((mb_strlen($this->container['first']) > 45)) {
            $invalidProperties[] = "invalid value for 'first', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['last'] === null) {
            $invalidProperties[] = "'last' can't be null";
        }
        if ((mb_strlen($this->container['last']) > 45)) {
            $invalidProperties[] = "invalid value for 'last', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['mobilePhone']) && (mb_strlen($this->container['mobilePhone']) > 20)) {
            $invalidProperties[] = "invalid value for 'mobilePhone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['businessPhone']) && (mb_strlen($this->container['businessPhone']) > 20)) {
            $invalidProperties[] = "invalid value for 'businessPhone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['businessPhone']) && (mb_strlen($this->container['businessPhone']) < 7)) {
            $invalidProperties[] = "invalid value for 'businessPhone', the character length must be bigger than or equal to 7.";
        }

        if (!is_null($this->container['jobTitle']) && (mb_strlen($this->container['jobTitle']) > 45)) {
            $invalidProperties[] = "invalid value for 'jobTitle', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 45)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['avatar']) && (mb_strlen($this->container['avatar']) > 255)) {
            $invalidProperties[] = "invalid value for 'avatar', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language', must be one of '%s'",
                $this->container['language'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 5)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 5.";
        }

        $allowedValues = $this->getIsPrimaryAllowableValues();
        if (!is_null($this->container['isPrimary']) && !in_array($this->container['isPrimary'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isPrimary', must be one of '%s'",
                $this->container['isPrimary'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVmGreetingTypeAllowableValues();
        if (!is_null($this->container['vmGreetingType']) && !in_array($this->container['vmGreetingType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vmGreetingType', must be one of '%s'",
                $this->container['vmGreetingType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vmPlaybackNumber']) && (mb_strlen($this->container['vmPlaybackNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'vmPlaybackNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['callerIdNumber']) && (mb_strlen($this->container['callerIdNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'callerIdNumber', the character length must be smaller than or equal to 20.";
        }

        $allowedValues = $this->getAdminPermissionAllowableValues();
        if (!is_null($this->container['adminPermission']) && !in_array($this->container['adminPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adminPermission', must be one of '%s'",
                $this->container['adminPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBillingPermissionAllowableValues();
        if (!is_null($this->container['billingPermission']) && !in_array($this->container['billingPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billingPermission', must be one of '%s'",
                $this->container['billingPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhonePermissionAllowableValues();
        if (!is_null($this->container['phonePermission']) && !in_array($this->container['phonePermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'phonePermission', must be one of '%s'",
                $this->container['phonePermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAgilePermissionAllowableValues();
        if (!is_null($this->container['agilePermission']) && !in_array($this->container['agilePermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'agilePermission', must be one of '%s'",
                $this->container['agilePermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobServerPermissionAllowableValues();
        if (!is_null($this->container['jobServerPermission']) && !in_array($this->container['jobServerPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'jobServerPermission', must be one of '%s'",
                $this->container['jobServerPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMediaServerPermissionAllowableValues();
        if (!is_null($this->container['mediaServerPermission']) && !in_array($this->container['mediaServerPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mediaServerPermission', must be one of '%s'",
                $this->container['mediaServerPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMailServerPermissionAllowableValues();
        if (!is_null($this->container['mailServerPermission']) && !in_array($this->container['mailServerPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mailServerPermission', must be one of '%s'",
                $this->container['mailServerPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSuperAdminPermissionAllowableValues();
        if (!is_null($this->container['superAdminPermission']) && !in_array($this->container['superAdminPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'superAdminPermission', must be one of '%s'",
                $this->container['superAdminPermission'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        $allowedValues = $this->getVmTranscriptionAllowableValues();
        if (!is_null($this->container['vmTranscription']) && !in_array($this->container['vmTranscription'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vmTranscription', must be one of '%s'",
                $this->container['vmTranscription'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return mixed
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param mixed $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Users., must be smaller than or equal to 255.');
        }
        if (!is_null($email) && (mb_strlen($email) < 5)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Users., must be bigger than or equal to 5.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return mixed
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param mixed $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($password) && (mb_strlen($password) > 255)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Users., must be smaller than or equal to 255.');
        }
        if (!is_null($password) && (mb_strlen($password) < 8)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Users., must be bigger than or equal to 8.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets sipPassword
     *
     * @return mixed
     */
    public function getSipPassword()
    {
        return $this->container['sipPassword'];
    }

    /**
     * Sets sipPassword
     *
     * @param mixed $sipPassword sipPassword
     *
     * @return self
     */
    public function setSipPassword($sipPassword)
    {
        if (is_null($sipPassword)) {
            array_push($this->openAPINullablesSetToNull, 'sipPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sipPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sipPassword) && (mb_strlen($sipPassword) > 45)) {
            throw new \InvalidArgumentException('invalid length for $sipPassword when calling Users., must be smaller than or equal to 45.');
        }
        if (!is_null($sipPassword) && (mb_strlen($sipPassword) < 8)) {
            throw new \InvalidArgumentException('invalid length for $sipPassword when calling Users., must be bigger than or equal to 8.');
        }

        $this->container['sipPassword'] = $sipPassword;

        return $this;
    }

    /**
     * Gets turnPassword
     *
     * @return mixed|null
     */
    public function getTurnPassword()
    {
        return $this->container['turnPassword'];
    }

    /**
     * Sets turnPassword
     *
     * @param mixed|null $turnPassword turnPassword
     *
     * @return self
     */
    public function setTurnPassword($turnPassword)
    {
        if (is_null($turnPassword)) {
            array_push($this->openAPINullablesSetToNull, 'turnPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('turnPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($turnPassword) && (mb_strlen($turnPassword) > 45)) {
            throw new \InvalidArgumentException('invalid length for $turnPassword when calling Users., must be smaller than or equal to 45.');
        }
        if (!is_null($turnPassword) && (mb_strlen($turnPassword) < 8)) {
            throw new \InvalidArgumentException('invalid length for $turnPassword when calling Users., must be bigger than or equal to 8.');
        }

        $this->container['turnPassword'] = $turnPassword;

        return $this;
    }

    /**
     * Gets first
     *
     * @return mixed
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     *
     * @param mixed $first first
     *
     * @return self
     */
    public function setFirst($first)
    {
        if (is_null($first)) {
            array_push($this->openAPINullablesSetToNull, 'first');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($first) && (mb_strlen($first) > 45)) {
            throw new \InvalidArgumentException('invalid length for $first when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets last
     *
     * @return mixed
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param mixed $last last
     *
     * @return self
     */
    public function setLast($last)
    {
        if (is_null($last)) {
            array_push($this->openAPINullablesSetToNull, 'last');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($last) && (mb_strlen($last) > 45)) {
            throw new \InvalidArgumentException('invalid length for $last when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return mixed|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param mixed|null $mobilePhone mobilePhone
     *
     * @return self
     */
    public function setMobilePhone($mobilePhone)
    {
        if (is_null($mobilePhone)) {
            array_push($this->openAPINullablesSetToNull, 'mobilePhone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobilePhone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mobilePhone) && (mb_strlen($mobilePhone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $mobilePhone when calling Users., must be smaller than or equal to 20.');
        }

        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }

    /**
     * Gets businessPhone
     *
     * @return mixed|null
     */
    public function getBusinessPhone()
    {
        return $this->container['businessPhone'];
    }

    /**
     * Sets businessPhone
     *
     * @param mixed|null $businessPhone businessPhone
     *
     * @return self
     */
    public function setBusinessPhone($businessPhone)
    {
        if (is_null($businessPhone)) {
            array_push($this->openAPINullablesSetToNull, 'businessPhone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessPhone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($businessPhone) && (mb_strlen($businessPhone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $businessPhone when calling Users., must be smaller than or equal to 20.');
        }
        if (!is_null($businessPhone) && (mb_strlen($businessPhone) < 7)) {
            throw new \InvalidArgumentException('invalid length for $businessPhone when calling Users., must be bigger than or equal to 7.');
        }

        $this->container['businessPhone'] = $businessPhone;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return mixed|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param mixed|null $extension extension
     *
     * @return self
     */
    public function setExtension($extension)
    {
        if (is_null($extension)) {
            array_push($this->openAPINullablesSetToNull, 'extension');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extension', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets customCallerId
     *
     * @return mixed|null
     */
    public function getCustomCallerId()
    {
        return $this->container['customCallerId'];
    }

    /**
     * Sets customCallerId
     *
     * @param mixed|null $customCallerId customCallerId
     *
     * @return self
     */
    public function setCustomCallerId($customCallerId)
    {
        if (is_null($customCallerId)) {
            array_push($this->openAPINullablesSetToNull, 'customCallerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customCallerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customCallerId'] = $customCallerId;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return mixed|null
     */
    public function getJobTitle()
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     *
     * @param mixed|null $jobTitle jobTitle
     *
     * @return self
     */
    public function setJobTitle($jobTitle)
    {
        if (is_null($jobTitle)) {
            array_push($this->openAPINullablesSetToNull, 'jobTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobTitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($jobTitle) && (mb_strlen($jobTitle) > 45)) {
            throw new \InvalidArgumentException('invalid length for $jobTitle when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets department
     *
     * @return mixed|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param mixed|null $department department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($department) && (mb_strlen($department) > 45)) {
            throw new \InvalidArgumentException('invalid length for $department when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets office
     *
     * @return mixed|null
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param mixed|null $office ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setOffice($office)
    {
        if (is_null($office)) {
            array_push($this->openAPINullablesSetToNull, 'office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return mixed|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param mixed|null $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($avatar) && (mb_strlen($avatar) > 255)) {
            throw new \InvalidArgumentException('invalid length for $avatar when calling Users., must be smaller than or equal to 255.');
        }

        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets language
     *
     * @return mixed|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param mixed|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language', must be one of '%s'",
                    $language,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($language) && (mb_strlen($language) > 5)) {
            throw new \InvalidArgumentException('invalid length for $language when calling Users., must be smaller than or equal to 5.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets isPrimary
     *
     * @return mixed|null
     */
    public function getIsPrimary()
    {
        return $this->container['isPrimary'];
    }

    /**
     * Sets isPrimary
     *
     * @param mixed|null $isPrimary isPrimary
     *
     * @return self
     */
    public function setIsPrimary($isPrimary)
    {
        if (is_null($isPrimary)) {
            array_push($this->openAPINullablesSetToNull, 'isPrimary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isPrimary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIsPrimaryAllowableValues();
        if (!is_null($isPrimary) && !in_array($isPrimary, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isPrimary', must be one of '%s'",
                    $isPrimary,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isPrimary'] = $isPrimary;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vmGreetingType
     *
     * @return mixed|null
     */
    public function getVmGreetingType()
    {
        return $this->container['vmGreetingType'];
    }

    /**
     * Sets vmGreetingType
     *
     * @param mixed|null $vmGreetingType vmGreetingType
     *
     * @return self
     */
    public function setVmGreetingType($vmGreetingType)
    {
        if (is_null($vmGreetingType)) {
            array_push($this->openAPINullablesSetToNull, 'vmGreetingType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vmGreetingType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getVmGreetingTypeAllowableValues();
        if (!is_null($vmGreetingType) && !in_array($vmGreetingType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vmGreetingType', must be one of '%s'",
                    $vmGreetingType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vmGreetingType'] = $vmGreetingType;

        return $this;
    }

    /**
     * Gets vmTimeout
     *
     * @return mixed|null
     */
    public function getVmTimeout()
    {
        return $this->container['vmTimeout'];
    }

    /**
     * Sets vmTimeout
     *
     * @param mixed|null $vmTimeout vmTimeout
     *
     * @return self
     */
    public function setVmTimeout($vmTimeout)
    {
        if (is_null($vmTimeout)) {
            array_push($this->openAPINullablesSetToNull, 'vmTimeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vmTimeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vmTimeout'] = $vmTimeout;

        return $this;
    }

    /**
     * Gets vmFile
     *
     * @return mixed|null
     */
    public function getVmFile()
    {
        return $this->container['vmFile'];
    }

    /**
     * Sets vmFile
     *
     * @param mixed|null $vmFile ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setVmFile($vmFile)
    {
        if (is_null($vmFile)) {
            array_push($this->openAPINullablesSetToNull, 'vmFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vmFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vmFile'] = $vmFile;

        return $this;
    }

    /**
     * Gets vmPlaybackNumber
     *
     * @return mixed|null
     */
    public function getVmPlaybackNumber()
    {
        return $this->container['vmPlaybackNumber'];
    }

    /**
     * Sets vmPlaybackNumber
     *
     * @param mixed|null $vmPlaybackNumber vmPlaybackNumber
     *
     * @return self
     */
    public function setVmPlaybackNumber($vmPlaybackNumber)
    {
        if (is_null($vmPlaybackNumber)) {
            array_push($this->openAPINullablesSetToNull, 'vmPlaybackNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vmPlaybackNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vmPlaybackNumber) && (mb_strlen($vmPlaybackNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vmPlaybackNumber when calling Users., must be smaller than or equal to 20.');
        }

        $this->container['vmPlaybackNumber'] = $vmPlaybackNumber;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return mixed|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param mixed|null $pin pin
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (is_null($pin)) {
            array_push($this->openAPINullablesSetToNull, 'pin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets number
     *
     * @return mixed|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param mixed|null $number ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets region
     *
     * @return mixed|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param mixed|null $region ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets callerIdNumber
     *
     * @return mixed|null
     */
    public function getCallerIdNumber()
    {
        return $this->container['callerIdNumber'];
    }

    /**
     * Sets callerIdNumber
     *
     * @param mixed|null $callerIdNumber callerIdNumber
     *
     * @return self
     */
    public function setCallerIdNumber($callerIdNumber)
    {
        if (is_null($callerIdNumber)) {
            array_push($this->openAPINullablesSetToNull, 'callerIdNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callerIdNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($callerIdNumber) && (mb_strlen($callerIdNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $callerIdNumber when calling Users., must be smaller than or equal to 20.');
        }

        $this->container['callerIdNumber'] = $callerIdNumber;

        return $this;
    }

    /**
     * Gets adminPermission
     *
     * @return mixed|null
     */
    public function getAdminPermission()
    {
        return $this->container['adminPermission'];
    }

    /**
     * Sets adminPermission
     *
     * @param mixed|null $adminPermission adminPermission
     *
     * @return self
     */
    public function setAdminPermission($adminPermission)
    {
        if (is_null($adminPermission)) {
            array_push($this->openAPINullablesSetToNull, 'adminPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adminPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAdminPermissionAllowableValues();
        if (!is_null($adminPermission) && !in_array($adminPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adminPermission', must be one of '%s'",
                    $adminPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adminPermission'] = $adminPermission;

        return $this;
    }

    /**
     * Gets billingPermission
     *
     * @return mixed|null
     */
    public function getBillingPermission()
    {
        return $this->container['billingPermission'];
    }

    /**
     * Sets billingPermission
     *
     * @param mixed|null $billingPermission billingPermission
     *
     * @return self
     */
    public function setBillingPermission($billingPermission)
    {
        if (is_null($billingPermission)) {
            array_push($this->openAPINullablesSetToNull, 'billingPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBillingPermissionAllowableValues();
        if (!is_null($billingPermission) && !in_array($billingPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billingPermission', must be one of '%s'",
                    $billingPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billingPermission'] = $billingPermission;

        return $this;
    }

    /**
     * Gets phonePermission
     *
     * @return mixed|null
     */
    public function getPhonePermission()
    {
        return $this->container['phonePermission'];
    }

    /**
     * Sets phonePermission
     *
     * @param mixed|null $phonePermission phonePermission
     *
     * @return self
     */
    public function setPhonePermission($phonePermission)
    {
        if (is_null($phonePermission)) {
            array_push($this->openAPINullablesSetToNull, 'phonePermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phonePermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPhonePermissionAllowableValues();
        if (!is_null($phonePermission) && !in_array($phonePermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'phonePermission', must be one of '%s'",
                    $phonePermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phonePermission'] = $phonePermission;

        return $this;
    }

    /**
     * Gets agilePermission
     *
     * @return mixed|null
     */
    public function getAgilePermission()
    {
        return $this->container['agilePermission'];
    }

    /**
     * Sets agilePermission
     *
     * @param mixed|null $agilePermission agilePermission
     *
     * @return self
     */
    public function setAgilePermission($agilePermission)
    {
        if (is_null($agilePermission)) {
            array_push($this->openAPINullablesSetToNull, 'agilePermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agilePermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAgilePermissionAllowableValues();
        if (!is_null($agilePermission) && !in_array($agilePermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'agilePermission', must be one of '%s'",
                    $agilePermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agilePermission'] = $agilePermission;

        return $this;
    }

    /**
     * Gets jobServerPermission
     *
     * @return mixed|null
     */
    public function getJobServerPermission()
    {
        return $this->container['jobServerPermission'];
    }

    /**
     * Sets jobServerPermission
     *
     * @param mixed|null $jobServerPermission jobServerPermission
     *
     * @return self
     */
    public function setJobServerPermission($jobServerPermission)
    {
        if (is_null($jobServerPermission)) {
            array_push($this->openAPINullablesSetToNull, 'jobServerPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobServerPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getJobServerPermissionAllowableValues();
        if (!is_null($jobServerPermission) && !in_array($jobServerPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'jobServerPermission', must be one of '%s'",
                    $jobServerPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jobServerPermission'] = $jobServerPermission;

        return $this;
    }

    /**
     * Gets mediaServerPermission
     *
     * @return mixed|null
     */
    public function getMediaServerPermission()
    {
        return $this->container['mediaServerPermission'];
    }

    /**
     * Sets mediaServerPermission
     *
     * @param mixed|null $mediaServerPermission mediaServerPermission
     *
     * @return self
     */
    public function setMediaServerPermission($mediaServerPermission)
    {
        if (is_null($mediaServerPermission)) {
            array_push($this->openAPINullablesSetToNull, 'mediaServerPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mediaServerPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMediaServerPermissionAllowableValues();
        if (!is_null($mediaServerPermission) && !in_array($mediaServerPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mediaServerPermission', must be one of '%s'",
                    $mediaServerPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaServerPermission'] = $mediaServerPermission;

        return $this;
    }

    /**
     * Gets mailServerPermission
     *
     * @return mixed|null
     */
    public function getMailServerPermission()
    {
        return $this->container['mailServerPermission'];
    }

    /**
     * Sets mailServerPermission
     *
     * @param mixed|null $mailServerPermission mailServerPermission
     *
     * @return self
     */
    public function setMailServerPermission($mailServerPermission)
    {
        if (is_null($mailServerPermission)) {
            array_push($this->openAPINullablesSetToNull, 'mailServerPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailServerPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMailServerPermissionAllowableValues();
        if (!is_null($mailServerPermission) && !in_array($mailServerPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mailServerPermission', must be one of '%s'",
                    $mailServerPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mailServerPermission'] = $mailServerPermission;

        return $this;
    }

    /**
     * Gets superAdminPermission
     *
     * @return mixed|null
     */
    public function getSuperAdminPermission()
    {
        return $this->container['superAdminPermission'];
    }

    /**
     * Sets superAdminPermission
     *
     * @param mixed|null $superAdminPermission superAdminPermission
     *
     * @return self
     */
    public function setSuperAdminPermission($superAdminPermission)
    {
        if (is_null($superAdminPermission)) {
            array_push($this->openAPINullablesSetToNull, 'superAdminPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('superAdminPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSuperAdminPermissionAllowableValues();
        if (!is_null($superAdminPermission) && !in_array($superAdminPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'superAdminPermission', must be one of '%s'",
                    $superAdminPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['superAdminPermission'] = $superAdminPermission;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return mixed
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param mixed $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets vmTranscription
     *
     * @return mixed|null
     */
    public function getVmTranscription()
    {
        return $this->container['vmTranscription'];
    }

    /**
     * Sets vmTranscription
     *
     * @param mixed|null $vmTranscription vmTranscription
     *
     * @return self
     */
    public function setVmTranscription($vmTranscription)
    {
        if (is_null($vmTranscription)) {
            array_push($this->openAPINullablesSetToNull, 'vmTranscription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vmTranscription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getVmTranscriptionAllowableValues();
        if (!is_null($vmTranscription) && !in_array($vmTranscription, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vmTranscription', must be one of '%s'",
                    $vmTranscription,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vmTranscription'] = $vmTranscription;

        return $this;
    }

    /**
     * Gets communication
     *
     * @return mixed|null
     */
    public function getCommunication()
    {
        return $this->container['communication'];
    }

    /**
     * Sets communication
     *
     * @param mixed|null $communication communication
     *
     * @return self
     */
    public function setCommunication($communication)
    {
        if (is_null($communication)) {
            array_push($this->openAPINullablesSetToNull, 'communication');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('communication', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['communication'] = $communication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


