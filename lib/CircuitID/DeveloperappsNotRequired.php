<?php
/**
 * DeveloperappsNotRequired
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction                 Welcome to the Circuit ID REST API!                  Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go. Embrace the future of communication with Circuit ID, elevating your interactions to new heights.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.8
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeveloperappsNotRequired Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeveloperappsNotRequired implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'developerappsNotRequired';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'mixed',
        'description' => 'mixed',
        'type' => 'mixed',
        'visibility' => 'mixed',
        'requireId' => 'mixed',
        'isFree' => 'mixed',
        'feeDescription' => 'mixed',
        'integrationType' => 'mixed',
        'services' => 'mixed',
        'events' => 'mixed',
        'user' => 'mixed',
        'webhookUrl' => 'mixed',
        'termsOfServiceUrl' => 'mixed',
        'privacyPolicyUrl' => 'mixed',
        'permissions' => 'mixed',
        'status' => 'mixed',
        'webhookAuthType' => 'mixed',
        'webhookUsername' => 'mixed',
        'webhookPassword' => 'mixed',
        'webhookTokenName' => 'mixed',
        'webhookToken' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'type' => null,
        'visibility' => null,
        'requireId' => 'int32',
        'isFree' => 'int32',
        'feeDescription' => null,
        'integrationType' => null,
        'services' => null,
        'events' => null,
        'user' => null,
        'webhookUrl' => null,
        'termsOfServiceUrl' => null,
        'privacyPolicyUrl' => null,
        'permissions' => null,
        'status' => null,
        'webhookAuthType' => null,
        'webhookUsername' => null,
        'webhookPassword' => null,
        'webhookTokenName' => null,
        'webhookToken' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'description' => true,
		'type' => true,
		'visibility' => true,
		'requireId' => true,
		'isFree' => true,
		'feeDescription' => true,
		'integrationType' => true,
		'services' => true,
		'events' => true,
		'user' => true,
		'webhookUrl' => true,
		'termsOfServiceUrl' => true,
		'privacyPolicyUrl' => true,
		'permissions' => true,
		'status' => true,
		'webhookAuthType' => true,
		'webhookUsername' => true,
		'webhookPassword' => true,
		'webhookTokenName' => true,
		'webhookToken' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'type' => 'type',
        'visibility' => 'visibility',
        'requireId' => 'requireId',
        'isFree' => 'isFree',
        'feeDescription' => 'feeDescription',
        'integrationType' => 'integrationType',
        'services' => 'services',
        'events' => 'events',
        'user' => 'user',
        'webhookUrl' => 'webhookUrl',
        'termsOfServiceUrl' => 'termsOfServiceUrl',
        'privacyPolicyUrl' => 'privacyPolicyUrl',
        'permissions' => 'permissions',
        'status' => 'status',
        'webhookAuthType' => 'webhookAuthType',
        'webhookUsername' => 'webhookUsername',
        'webhookPassword' => 'webhookPassword',
        'webhookTokenName' => 'webhookTokenName',
        'webhookToken' => 'webhookToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'type' => 'setType',
        'visibility' => 'setVisibility',
        'requireId' => 'setRequireId',
        'isFree' => 'setIsFree',
        'feeDescription' => 'setFeeDescription',
        'integrationType' => 'setIntegrationType',
        'services' => 'setServices',
        'events' => 'setEvents',
        'user' => 'setUser',
        'webhookUrl' => 'setWebhookUrl',
        'termsOfServiceUrl' => 'setTermsOfServiceUrl',
        'privacyPolicyUrl' => 'setPrivacyPolicyUrl',
        'permissions' => 'setPermissions',
        'status' => 'setStatus',
        'webhookAuthType' => 'setWebhookAuthType',
        'webhookUsername' => 'setWebhookUsername',
        'webhookPassword' => 'setWebhookPassword',
        'webhookTokenName' => 'setWebhookTokenName',
        'webhookToken' => 'setWebhookToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'type' => 'getType',
        'visibility' => 'getVisibility',
        'requireId' => 'getRequireId',
        'isFree' => 'getIsFree',
        'feeDescription' => 'getFeeDescription',
        'integrationType' => 'getIntegrationType',
        'services' => 'getServices',
        'events' => 'getEvents',
        'user' => 'getUser',
        'webhookUrl' => 'getWebhookUrl',
        'termsOfServiceUrl' => 'getTermsOfServiceUrl',
        'privacyPolicyUrl' => 'getPrivacyPolicyUrl',
        'permissions' => 'getPermissions',
        'status' => 'getStatus',
        'webhookAuthType' => 'getWebhookAuthType',
        'webhookUsername' => 'getWebhookUsername',
        'webhookPassword' => 'getWebhookPassword',
        'webhookTokenName' => 'getWebhookTokenName',
        'webhookToken' => 'getWebhookToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_EVENTS = 'events';
    public const VISIBILITY__PRIVATE = 'private';
    public const VISIBILITY__PUBLIC = 'public';
    public const REQUIRE_ID__1 = '1';
    public const REQUIRE_ID__0 = '0';
    public const IS_FREE__1 = '1';
    public const IS_FREE__0 = '0';
    public const INTEGRATION_TYPE_WEBHOOK = 'webhook';
    public const INTEGRATION_TYPE_CLIENT = 'client';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_DISABLED = 'disabled';
    public const STATUS_SUSPENDED = 'suspended';
    public const STATUS_ERROR = 'error';
    public const STATUS_PENDING = 'pending';
    public const WEBHOOK_AUTH_TYPE_HEADER = 'header';
    public const WEBHOOK_AUTH_TYPE_USERNAME_AND_PASSWORD = 'usernameAndPassword';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EVENTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY__PRIVATE,
            self::VISIBILITY__PUBLIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequireIdAllowableValues()
    {
        return [
            self::REQUIRE_ID__1,
            self::REQUIRE_ID__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsFreeAllowableValues()
    {
        return [
            self::IS_FREE__1,
            self::IS_FREE__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntegrationTypeAllowableValues()
    {
        return [
            self::INTEGRATION_TYPE_WEBHOOK,
            self::INTEGRATION_TYPE_CLIENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_DISABLED,
            self::STATUS_SUSPENDED,
            self::STATUS_ERROR,
            self::STATUS_PENDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebhookAuthTypeAllowableValues()
    {
        return [
            self::WEBHOOK_AUTH_TYPE_HEADER,
            self::WEBHOOK_AUTH_TYPE_USERNAME_AND_PASSWORD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('requireId', $data ?? [], null);
        $this->setIfExists('isFree', $data ?? [], null);
        $this->setIfExists('feeDescription', $data ?? [], null);
        $this->setIfExists('integrationType', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('webhookUrl', $data ?? [], null);
        $this->setIfExists('termsOfServiceUrl', $data ?? [], null);
        $this->setIfExists('privacyPolicyUrl', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('webhookAuthType', $data ?? [], null);
        $this->setIfExists('webhookUsername', $data ?? [], null);
        $this->setIfExists('webhookPassword', $data ?? [], null);
        $this->setIfExists('webhookTokenName', $data ?? [], null);
        $this->setIfExists('webhookToken', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 45)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'visibility', must be one of '%s'",
                $this->container['visibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequireIdAllowableValues();
        if (!is_null($this->container['requireId']) && !in_array($this->container['requireId'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'requireId', must be one of '%s'",
                $this->container['requireId'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsFreeAllowableValues();
        if (!is_null($this->container['isFree']) && !in_array($this->container['isFree'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isFree', must be one of '%s'",
                $this->container['isFree'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['feeDescription']) && (mb_strlen($this->container['feeDescription']) > 4096)) {
            $invalidProperties[] = "invalid value for 'feeDescription', the character length must be smaller than or equal to 4096.";
        }

        $allowedValues = $this->getIntegrationTypeAllowableValues();
        if (!is_null($this->container['integrationType']) && !in_array($this->container['integrationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'integrationType', must be one of '%s'",
                $this->container['integrationType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['webhookUrl']) && (mb_strlen($this->container['webhookUrl']) > 1024)) {
            $invalidProperties[] = "invalid value for 'webhookUrl', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['termsOfServiceUrl']) && (mb_strlen($this->container['termsOfServiceUrl']) > 1024)) {
            $invalidProperties[] = "invalid value for 'termsOfServiceUrl', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['privacyPolicyUrl']) && (mb_strlen($this->container['privacyPolicyUrl']) > 1024)) {
            $invalidProperties[] = "invalid value for 'privacyPolicyUrl', the character length must be smaller than or equal to 1024.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebhookAuthTypeAllowableValues();
        if (!is_null($this->container['webhookAuthType']) && !in_array($this->container['webhookAuthType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'webhookAuthType', must be one of '%s'",
                $this->container['webhookAuthType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['webhookUsername']) && (mb_strlen($this->container['webhookUsername']) > 255)) {
            $invalidProperties[] = "invalid value for 'webhookUsername', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['webhookPassword']) && (mb_strlen($this->container['webhookPassword']) > 255)) {
            $invalidProperties[] = "invalid value for 'webhookPassword', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['webhookTokenName']) && (mb_strlen($this->container['webhookTokenName']) > 255)) {
            $invalidProperties[] = "invalid value for 'webhookTokenName', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['webhookToken']) && (mb_strlen($this->container['webhookToken']) > 255)) {
            $invalidProperties[] = "invalid value for 'webhookToken', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name when calling DeveloperappsNotRequired., must be smaller than or equal to 45.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling DeveloperappsNotRequired., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return mixed|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param mixed|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return mixed|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param mixed|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            array_push($this->openAPINullablesSetToNull, 'visibility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visibility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($visibility) && !in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'visibility', must be one of '%s'",
                    $visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets requireId
     *
     * @return mixed|null
     */
    public function getRequireId()
    {
        return $this->container['requireId'];
    }

    /**
     * Sets requireId
     *
     * @param mixed|null $requireId requireId
     *
     * @return self
     */
    public function setRequireId($requireId)
    {
        if (is_null($requireId)) {
            array_push($this->openAPINullablesSetToNull, 'requireId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requireId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRequireIdAllowableValues();
        if (!is_null($requireId) && !in_array($requireId, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'requireId', must be one of '%s'",
                    $requireId,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requireId'] = $requireId;

        return $this;
    }

    /**
     * Gets isFree
     *
     * @return mixed|null
     */
    public function getIsFree()
    {
        return $this->container['isFree'];
    }

    /**
     * Sets isFree
     *
     * @param mixed|null $isFree isFree
     *
     * @return self
     */
    public function setIsFree($isFree)
    {
        if (is_null($isFree)) {
            array_push($this->openAPINullablesSetToNull, 'isFree');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isFree', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIsFreeAllowableValues();
        if (!is_null($isFree) && !in_array($isFree, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isFree', must be one of '%s'",
                    $isFree,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isFree'] = $isFree;

        return $this;
    }

    /**
     * Gets feeDescription
     *
     * @return mixed|null
     */
    public function getFeeDescription()
    {
        return $this->container['feeDescription'];
    }

    /**
     * Sets feeDescription
     *
     * @param mixed|null $feeDescription feeDescription
     *
     * @return self
     */
    public function setFeeDescription($feeDescription)
    {
        if (is_null($feeDescription)) {
            array_push($this->openAPINullablesSetToNull, 'feeDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('feeDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($feeDescription) && (mb_strlen($feeDescription) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $feeDescription when calling DeveloperappsNotRequired., must be smaller than or equal to 4096.');
        }

        $this->container['feeDescription'] = $feeDescription;

        return $this;
    }

    /**
     * Gets integrationType
     *
     * @return mixed|null
     */
    public function getIntegrationType()
    {
        return $this->container['integrationType'];
    }

    /**
     * Sets integrationType
     *
     * @param mixed|null $integrationType integrationType
     *
     * @return self
     */
    public function setIntegrationType($integrationType)
    {
        if (is_null($integrationType)) {
            array_push($this->openAPINullablesSetToNull, 'integrationType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('integrationType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getIntegrationTypeAllowableValues();
        if (!is_null($integrationType) && !in_array($integrationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'integrationType', must be one of '%s'",
                    $integrationType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['integrationType'] = $integrationType;

        return $this;
    }

    /**
     * Gets services
     *
     * @return mixed|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param mixed|null $services services
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            array_push($this->openAPINullablesSetToNull, 'services');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets events
     *
     * @return mixed|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param mixed|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            array_push($this->openAPINullablesSetToNull, 'events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets user
     *
     * @return mixed|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param mixed|null $user ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets webhookUrl
     *
     * @return mixed|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhookUrl'];
    }

    /**
     * Sets webhookUrl
     *
     * @param mixed|null $webhookUrl webhookUrl
     *
     * @return self
     */
    public function setWebhookUrl($webhookUrl)
    {
        if (is_null($webhookUrl)) {
            array_push($this->openAPINullablesSetToNull, 'webhookUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhookUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($webhookUrl) && (mb_strlen($webhookUrl) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $webhookUrl when calling DeveloperappsNotRequired., must be smaller than or equal to 1024.');
        }

        $this->container['webhookUrl'] = $webhookUrl;

        return $this;
    }

    /**
     * Gets termsOfServiceUrl
     *
     * @return mixed|null
     */
    public function getTermsOfServiceUrl()
    {
        return $this->container['termsOfServiceUrl'];
    }

    /**
     * Sets termsOfServiceUrl
     *
     * @param mixed|null $termsOfServiceUrl termsOfServiceUrl
     *
     * @return self
     */
    public function setTermsOfServiceUrl($termsOfServiceUrl)
    {
        if (is_null($termsOfServiceUrl)) {
            array_push($this->openAPINullablesSetToNull, 'termsOfServiceUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('termsOfServiceUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($termsOfServiceUrl) && (mb_strlen($termsOfServiceUrl) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $termsOfServiceUrl when calling DeveloperappsNotRequired., must be smaller than or equal to 1024.');
        }

        $this->container['termsOfServiceUrl'] = $termsOfServiceUrl;

        return $this;
    }

    /**
     * Gets privacyPolicyUrl
     *
     * @return mixed|null
     */
    public function getPrivacyPolicyUrl()
    {
        return $this->container['privacyPolicyUrl'];
    }

    /**
     * Sets privacyPolicyUrl
     *
     * @param mixed|null $privacyPolicyUrl privacyPolicyUrl
     *
     * @return self
     */
    public function setPrivacyPolicyUrl($privacyPolicyUrl)
    {
        if (is_null($privacyPolicyUrl)) {
            array_push($this->openAPINullablesSetToNull, 'privacyPolicyUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('privacyPolicyUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($privacyPolicyUrl) && (mb_strlen($privacyPolicyUrl) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $privacyPolicyUrl when calling DeveloperappsNotRequired., must be smaller than or equal to 1024.');
        }

        $this->container['privacyPolicyUrl'] = $privacyPolicyUrl;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return mixed|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param mixed|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            array_push($this->openAPINullablesSetToNull, 'permissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets webhookAuthType
     *
     * @return mixed|null
     */
    public function getWebhookAuthType()
    {
        return $this->container['webhookAuthType'];
    }

    /**
     * Sets webhookAuthType
     *
     * @param mixed|null $webhookAuthType webhookAuthType
     *
     * @return self
     */
    public function setWebhookAuthType($webhookAuthType)
    {
        if (is_null($webhookAuthType)) {
            array_push($this->openAPINullablesSetToNull, 'webhookAuthType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhookAuthType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getWebhookAuthTypeAllowableValues();
        if (!is_null($webhookAuthType) && !in_array($webhookAuthType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'webhookAuthType', must be one of '%s'",
                    $webhookAuthType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['webhookAuthType'] = $webhookAuthType;

        return $this;
    }

    /**
     * Gets webhookUsername
     *
     * @return mixed|null
     */
    public function getWebhookUsername()
    {
        return $this->container['webhookUsername'];
    }

    /**
     * Sets webhookUsername
     *
     * @param mixed|null $webhookUsername webhookUsername
     *
     * @return self
     */
    public function setWebhookUsername($webhookUsername)
    {
        if (is_null($webhookUsername)) {
            array_push($this->openAPINullablesSetToNull, 'webhookUsername');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhookUsername', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($webhookUsername) && (mb_strlen($webhookUsername) > 255)) {
            throw new \InvalidArgumentException('invalid length for $webhookUsername when calling DeveloperappsNotRequired., must be smaller than or equal to 255.');
        }

        $this->container['webhookUsername'] = $webhookUsername;

        return $this;
    }

    /**
     * Gets webhookPassword
     *
     * @return mixed|null
     */
    public function getWebhookPassword()
    {
        return $this->container['webhookPassword'];
    }

    /**
     * Sets webhookPassword
     *
     * @param mixed|null $webhookPassword webhookPassword
     *
     * @return self
     */
    public function setWebhookPassword($webhookPassword)
    {
        if (is_null($webhookPassword)) {
            array_push($this->openAPINullablesSetToNull, 'webhookPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhookPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($webhookPassword) && (mb_strlen($webhookPassword) > 255)) {
            throw new \InvalidArgumentException('invalid length for $webhookPassword when calling DeveloperappsNotRequired., must be smaller than or equal to 255.');
        }

        $this->container['webhookPassword'] = $webhookPassword;

        return $this;
    }

    /**
     * Gets webhookTokenName
     *
     * @return mixed|null
     */
    public function getWebhookTokenName()
    {
        return $this->container['webhookTokenName'];
    }

    /**
     * Sets webhookTokenName
     *
     * @param mixed|null $webhookTokenName webhookTokenName
     *
     * @return self
     */
    public function setWebhookTokenName($webhookTokenName)
    {
        if (is_null($webhookTokenName)) {
            array_push($this->openAPINullablesSetToNull, 'webhookTokenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhookTokenName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($webhookTokenName) && (mb_strlen($webhookTokenName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $webhookTokenName when calling DeveloperappsNotRequired., must be smaller than or equal to 255.');
        }

        $this->container['webhookTokenName'] = $webhookTokenName;

        return $this;
    }

    /**
     * Gets webhookToken
     *
     * @return mixed|null
     */
    public function getWebhookToken()
    {
        return $this->container['webhookToken'];
    }

    /**
     * Sets webhookToken
     *
     * @param mixed|null $webhookToken webhookToken
     *
     * @return self
     */
    public function setWebhookToken($webhookToken)
    {
        if (is_null($webhookToken)) {
            array_push($this->openAPINullablesSetToNull, 'webhookToken');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhookToken', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($webhookToken) && (mb_strlen($webhookToken) > 255)) {
            throw new \InvalidArgumentException('invalid length for $webhookToken when calling DeveloperappsNotRequired., must be smaller than or equal to 255.');
        }

        $this->container['webhookToken'] = $webhookToken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


