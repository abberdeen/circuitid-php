<?php
/**
 * Callqueues
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction                 Welcome to the Circuit ID REST API!                  Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go. Embrace the future of communication with Circuit ID, elevating your interactions to new heights.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.8
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Callqueues Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Callqueues implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'callqueues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'mixed',
        'strategy' => 'mixed',
        'announcePosition' => 'mixed',
        'moh' => 'mixed',
        'callerResumeTimeout' => 'mixed',
        'maxWaitTime' => 'mixed',
        'maxWaitTimeNoAgent' => 'mixed',
        'maxNoAnswer' => 'mixed',
        'noAnswerDelayTimeout' => 'mixed',
        'rejectTimeout' => 'mixed',
        'busyTimeout' => 'mixed',
        'wrapUpTimeout' => 'mixed',
        'timeBasedScore' => 'mixed',
        'tierRulesApply' => 'mixed',
        'tierRuleNoAgentNoWait' => 'mixed',
        'tierRuleWaitSecond' => 'mixed',
        'tierRuleWaitMultiplyLevel' => 'mixed',
        'abandonedResumeAllowed' => 'mixed',
        'discardAbandonedAfter' => 'mixed',
        'maxWaitTimeNoAgentTimeReached' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'strategy' => null,
        'announcePosition' => 'int32',
        'moh' => null,
        'callerResumeTimeout' => 'int32',
        'maxWaitTime' => 'int32',
        'maxWaitTimeNoAgent' => 'int32',
        'maxNoAnswer' => 'int32',
        'noAnswerDelayTimeout' => 'int32',
        'rejectTimeout' => 'int32',
        'busyTimeout' => 'int32',
        'wrapUpTimeout' => 'int32',
        'timeBasedScore' => null,
        'tierRulesApply' => null,
        'tierRuleNoAgentNoWait' => null,
        'tierRuleWaitSecond' => 'int32',
        'tierRuleWaitMultiplyLevel' => null,
        'abandonedResumeAllowed' => null,
        'discardAbandonedAfter' => 'int32',
        'maxWaitTimeNoAgentTimeReached' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'strategy' => true,
		'announcePosition' => true,
		'moh' => true,
		'callerResumeTimeout' => true,
		'maxWaitTime' => true,
		'maxWaitTimeNoAgent' => true,
		'maxNoAnswer' => true,
		'noAnswerDelayTimeout' => true,
		'rejectTimeout' => true,
		'busyTimeout' => true,
		'wrapUpTimeout' => true,
		'timeBasedScore' => true,
		'tierRulesApply' => true,
		'tierRuleNoAgentNoWait' => true,
		'tierRuleWaitSecond' => true,
		'tierRuleWaitMultiplyLevel' => true,
		'abandonedResumeAllowed' => true,
		'discardAbandonedAfter' => true,
		'maxWaitTimeNoAgentTimeReached' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'strategy' => 'strategy',
        'announcePosition' => 'announcePosition',
        'moh' => 'moh',
        'callerResumeTimeout' => 'callerResumeTimeout',
        'maxWaitTime' => 'maxWaitTime',
        'maxWaitTimeNoAgent' => 'maxWaitTimeNoAgent',
        'maxNoAnswer' => 'maxNoAnswer',
        'noAnswerDelayTimeout' => 'noAnswerDelayTimeout',
        'rejectTimeout' => 'rejectTimeout',
        'busyTimeout' => 'busyTimeout',
        'wrapUpTimeout' => 'wrapUpTimeout',
        'timeBasedScore' => 'timeBasedScore',
        'tierRulesApply' => 'tierRulesApply',
        'tierRuleNoAgentNoWait' => 'tierRuleNoAgentNoWait',
        'tierRuleWaitSecond' => 'tierRuleWaitSecond',
        'tierRuleWaitMultiplyLevel' => 'tierRuleWaitMultiplyLevel',
        'abandonedResumeAllowed' => 'abandonedResumeAllowed',
        'discardAbandonedAfter' => 'discardAbandonedAfter',
        'maxWaitTimeNoAgentTimeReached' => 'maxWaitTimeNoAgentTimeReached'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'strategy' => 'setStrategy',
        'announcePosition' => 'setAnnouncePosition',
        'moh' => 'setMoh',
        'callerResumeTimeout' => 'setCallerResumeTimeout',
        'maxWaitTime' => 'setMaxWaitTime',
        'maxWaitTimeNoAgent' => 'setMaxWaitTimeNoAgent',
        'maxNoAnswer' => 'setMaxNoAnswer',
        'noAnswerDelayTimeout' => 'setNoAnswerDelayTimeout',
        'rejectTimeout' => 'setRejectTimeout',
        'busyTimeout' => 'setBusyTimeout',
        'wrapUpTimeout' => 'setWrapUpTimeout',
        'timeBasedScore' => 'setTimeBasedScore',
        'tierRulesApply' => 'setTierRulesApply',
        'tierRuleNoAgentNoWait' => 'setTierRuleNoAgentNoWait',
        'tierRuleWaitSecond' => 'setTierRuleWaitSecond',
        'tierRuleWaitMultiplyLevel' => 'setTierRuleWaitMultiplyLevel',
        'abandonedResumeAllowed' => 'setAbandonedResumeAllowed',
        'discardAbandonedAfter' => 'setDiscardAbandonedAfter',
        'maxWaitTimeNoAgentTimeReached' => 'setMaxWaitTimeNoAgentTimeReached'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'strategy' => 'getStrategy',
        'announcePosition' => 'getAnnouncePosition',
        'moh' => 'getMoh',
        'callerResumeTimeout' => 'getCallerResumeTimeout',
        'maxWaitTime' => 'getMaxWaitTime',
        'maxWaitTimeNoAgent' => 'getMaxWaitTimeNoAgent',
        'maxNoAnswer' => 'getMaxNoAnswer',
        'noAnswerDelayTimeout' => 'getNoAnswerDelayTimeout',
        'rejectTimeout' => 'getRejectTimeout',
        'busyTimeout' => 'getBusyTimeout',
        'wrapUpTimeout' => 'getWrapUpTimeout',
        'timeBasedScore' => 'getTimeBasedScore',
        'tierRulesApply' => 'getTierRulesApply',
        'tierRuleNoAgentNoWait' => 'getTierRuleNoAgentNoWait',
        'tierRuleWaitSecond' => 'getTierRuleWaitSecond',
        'tierRuleWaitMultiplyLevel' => 'getTierRuleWaitMultiplyLevel',
        'abandonedResumeAllowed' => 'getAbandonedResumeAllowed',
        'discardAbandonedAfter' => 'getDiscardAbandonedAfter',
        'maxWaitTimeNoAgentTimeReached' => 'getMaxWaitTimeNoAgentTimeReached'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STRATEGY_RING_ALL = 'ring-all';
    public const STRATEGY_LONGEST_IDLE_AGENT = 'longest-idle-agent';
    public const STRATEGY_ROUND_ROBIN = 'round-robin';
    public const STRATEGY_TOP_DOWN = 'top-down';
    public const STRATEGY_AGENT_WITH_LEAST_TALK_TIME = 'agent-with-least-talk-time';
    public const STRATEGY_AGENT_WITH_FEWEST_CALLS = 'agent-with-fewest-calls';
    public const STRATEGY_SEQUENTIALLY_BY_AGENT_ORDER = 'sequentially-by-agent-order';
    public const STRATEGY_RANDOM = 'random';
    public const TIME_BASED_SCORE_QUEUE = 'queue';
    public const TIME_BASED_SCORE_SYSTEM = 'system';
    public const TIER_RULES_APPLY_TRUE = 'true';
    public const TIER_RULES_APPLY_FALSE = 'false';
    public const TIER_RULE_NO_AGENT_NO_WAIT_TRUE = 'true';
    public const TIER_RULE_NO_AGENT_NO_WAIT_FALSE = 'false';
    public const TIER_RULE_WAIT_MULTIPLY_LEVEL_TRUE = 'true';
    public const TIER_RULE_WAIT_MULTIPLY_LEVEL_FALSE = 'false';
    public const ABANDONED_RESUME_ALLOWED_TRUE = 'true';
    public const ABANDONED_RESUME_ALLOWED_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrategyAllowableValues()
    {
        return [
            self::STRATEGY_RING_ALL,
            self::STRATEGY_LONGEST_IDLE_AGENT,
            self::STRATEGY_ROUND_ROBIN,
            self::STRATEGY_TOP_DOWN,
            self::STRATEGY_AGENT_WITH_LEAST_TALK_TIME,
            self::STRATEGY_AGENT_WITH_FEWEST_CALLS,
            self::STRATEGY_SEQUENTIALLY_BY_AGENT_ORDER,
            self::STRATEGY_RANDOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeBasedScoreAllowableValues()
    {
        return [
            self::TIME_BASED_SCORE_QUEUE,
            self::TIME_BASED_SCORE_SYSTEM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTierRulesApplyAllowableValues()
    {
        return [
            self::TIER_RULES_APPLY_TRUE,
            self::TIER_RULES_APPLY_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTierRuleNoAgentNoWaitAllowableValues()
    {
        return [
            self::TIER_RULE_NO_AGENT_NO_WAIT_TRUE,
            self::TIER_RULE_NO_AGENT_NO_WAIT_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTierRuleWaitMultiplyLevelAllowableValues()
    {
        return [
            self::TIER_RULE_WAIT_MULTIPLY_LEVEL_TRUE,
            self::TIER_RULE_WAIT_MULTIPLY_LEVEL_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAbandonedResumeAllowedAllowableValues()
    {
        return [
            self::ABANDONED_RESUME_ALLOWED_TRUE,
            self::ABANDONED_RESUME_ALLOWED_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('announcePosition', $data ?? [], null);
        $this->setIfExists('moh', $data ?? [], null);
        $this->setIfExists('callerResumeTimeout', $data ?? [], null);
        $this->setIfExists('maxWaitTime', $data ?? [], null);
        $this->setIfExists('maxWaitTimeNoAgent', $data ?? [], null);
        $this->setIfExists('maxNoAnswer', $data ?? [], null);
        $this->setIfExists('noAnswerDelayTimeout', $data ?? [], null);
        $this->setIfExists('rejectTimeout', $data ?? [], null);
        $this->setIfExists('busyTimeout', $data ?? [], null);
        $this->setIfExists('wrapUpTimeout', $data ?? [], null);
        $this->setIfExists('timeBasedScore', $data ?? [], null);
        $this->setIfExists('tierRulesApply', $data ?? [], null);
        $this->setIfExists('tierRuleNoAgentNoWait', $data ?? [], null);
        $this->setIfExists('tierRuleWaitSecond', $data ?? [], null);
        $this->setIfExists('tierRuleWaitMultiplyLevel', $data ?? [], null);
        $this->setIfExists('abandonedResumeAllowed', $data ?? [], null);
        $this->setIfExists('discardAbandonedAfter', $data ?? [], null);
        $this->setIfExists('maxWaitTimeNoAgentTimeReached', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 45)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['strategy'] === null) {
            $invalidProperties[] = "'strategy' can't be null";
        }
        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($this->container['strategy']) && !in_array($this->container['strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strategy', must be one of '%s'",
                $this->container['strategy'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['moh'] === null) {
            $invalidProperties[] = "'moh' can't be null";
        }
        if ((mb_strlen($this->container['moh']) > 255)) {
            $invalidProperties[] = "invalid value for 'moh', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['callerResumeTimeout'] === null) {
            $invalidProperties[] = "'callerResumeTimeout' can't be null";
        }
        if ($this->container['maxWaitTime'] === null) {
            $invalidProperties[] = "'maxWaitTime' can't be null";
        }
        if ($this->container['maxWaitTimeNoAgent'] === null) {
            $invalidProperties[] = "'maxWaitTimeNoAgent' can't be null";
        }
        if ($this->container['maxNoAnswer'] === null) {
            $invalidProperties[] = "'maxNoAnswer' can't be null";
        }
        if ($this->container['timeBasedScore'] === null) {
            $invalidProperties[] = "'timeBasedScore' can't be null";
        }
        $allowedValues = $this->getTimeBasedScoreAllowableValues();
        if (!is_null($this->container['timeBasedScore']) && !in_array($this->container['timeBasedScore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timeBasedScore', must be one of '%s'",
                $this->container['timeBasedScore'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tierRulesApply'] === null) {
            $invalidProperties[] = "'tierRulesApply' can't be null";
        }
        $allowedValues = $this->getTierRulesApplyAllowableValues();
        if (!is_null($this->container['tierRulesApply']) && !in_array($this->container['tierRulesApply'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tierRulesApply', must be one of '%s'",
                $this->container['tierRulesApply'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tierRuleNoAgentNoWait'] === null) {
            $invalidProperties[] = "'tierRuleNoAgentNoWait' can't be null";
        }
        $allowedValues = $this->getTierRuleNoAgentNoWaitAllowableValues();
        if (!is_null($this->container['tierRuleNoAgentNoWait']) && !in_array($this->container['tierRuleNoAgentNoWait'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tierRuleNoAgentNoWait', must be one of '%s'",
                $this->container['tierRuleNoAgentNoWait'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tierRuleWaitMultiplyLevel'] === null) {
            $invalidProperties[] = "'tierRuleWaitMultiplyLevel' can't be null";
        }
        $allowedValues = $this->getTierRuleWaitMultiplyLevelAllowableValues();
        if (!is_null($this->container['tierRuleWaitMultiplyLevel']) && !in_array($this->container['tierRuleWaitMultiplyLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tierRuleWaitMultiplyLevel', must be one of '%s'",
                $this->container['tierRuleWaitMultiplyLevel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['abandonedResumeAllowed'] === null) {
            $invalidProperties[] = "'abandonedResumeAllowed' can't be null";
        }
        $allowedValues = $this->getAbandonedResumeAllowedAllowableValues();
        if (!is_null($this->container['abandonedResumeAllowed']) && !in_array($this->container['abandonedResumeAllowed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'abandonedResumeAllowed', must be one of '%s'",
                $this->container['abandonedResumeAllowed'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['maxWaitTimeNoAgentTimeReached'] === null) {
            $invalidProperties[] = "'maxWaitTimeNoAgentTimeReached' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Callqueues., must be smaller than or equal to 45.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return mixed
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param mixed $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            array_push($this->openAPINullablesSetToNull, 'strategy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('strategy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($strategy) && !in_array($strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strategy', must be one of '%s'",
                    $strategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets announcePosition
     *
     * @return mixed|null
     */
    public function getAnnouncePosition()
    {
        return $this->container['announcePosition'];
    }

    /**
     * Sets announcePosition
     *
     * @param mixed|null $announcePosition announcePosition
     *
     * @return self
     */
    public function setAnnouncePosition($announcePosition)
    {
        if (is_null($announcePosition)) {
            array_push($this->openAPINullablesSetToNull, 'announcePosition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('announcePosition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['announcePosition'] = $announcePosition;

        return $this;
    }

    /**
     * Gets moh
     *
     * @return mixed
     */
    public function getMoh()
    {
        return $this->container['moh'];
    }

    /**
     * Sets moh
     *
     * @param mixed $moh moh
     *
     * @return self
     */
    public function setMoh($moh)
    {
        if (is_null($moh)) {
            array_push($this->openAPINullablesSetToNull, 'moh');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('moh', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($moh) && (mb_strlen($moh) > 255)) {
            throw new \InvalidArgumentException('invalid length for $moh when calling Callqueues., must be smaller than or equal to 255.');
        }

        $this->container['moh'] = $moh;

        return $this;
    }

    /**
     * Gets callerResumeTimeout
     *
     * @return mixed
     */
    public function getCallerResumeTimeout()
    {
        return $this->container['callerResumeTimeout'];
    }

    /**
     * Sets callerResumeTimeout
     *
     * @param mixed $callerResumeTimeout callerResumeTimeout
     *
     * @return self
     */
    public function setCallerResumeTimeout($callerResumeTimeout)
    {
        if (is_null($callerResumeTimeout)) {
            array_push($this->openAPINullablesSetToNull, 'callerResumeTimeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callerResumeTimeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callerResumeTimeout'] = $callerResumeTimeout;

        return $this;
    }

    /**
     * Gets maxWaitTime
     *
     * @return mixed
     */
    public function getMaxWaitTime()
    {
        return $this->container['maxWaitTime'];
    }

    /**
     * Sets maxWaitTime
     *
     * @param mixed $maxWaitTime maxWaitTime
     *
     * @return self
     */
    public function setMaxWaitTime($maxWaitTime)
    {
        if (is_null($maxWaitTime)) {
            array_push($this->openAPINullablesSetToNull, 'maxWaitTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxWaitTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxWaitTime'] = $maxWaitTime;

        return $this;
    }

    /**
     * Gets maxWaitTimeNoAgent
     *
     * @return mixed
     */
    public function getMaxWaitTimeNoAgent()
    {
        return $this->container['maxWaitTimeNoAgent'];
    }

    /**
     * Sets maxWaitTimeNoAgent
     *
     * @param mixed $maxWaitTimeNoAgent maxWaitTimeNoAgent
     *
     * @return self
     */
    public function setMaxWaitTimeNoAgent($maxWaitTimeNoAgent)
    {
        if (is_null($maxWaitTimeNoAgent)) {
            array_push($this->openAPINullablesSetToNull, 'maxWaitTimeNoAgent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxWaitTimeNoAgent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxWaitTimeNoAgent'] = $maxWaitTimeNoAgent;

        return $this;
    }

    /**
     * Gets maxNoAnswer
     *
     * @return mixed
     */
    public function getMaxNoAnswer()
    {
        return $this->container['maxNoAnswer'];
    }

    /**
     * Sets maxNoAnswer
     *
     * @param mixed $maxNoAnswer maxNoAnswer
     *
     * @return self
     */
    public function setMaxNoAnswer($maxNoAnswer)
    {
        if (is_null($maxNoAnswer)) {
            array_push($this->openAPINullablesSetToNull, 'maxNoAnswer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxNoAnswer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxNoAnswer'] = $maxNoAnswer;

        return $this;
    }

    /**
     * Gets noAnswerDelayTimeout
     *
     * @return mixed|null
     */
    public function getNoAnswerDelayTimeout()
    {
        return $this->container['noAnswerDelayTimeout'];
    }

    /**
     * Sets noAnswerDelayTimeout
     *
     * @param mixed|null $noAnswerDelayTimeout noAnswerDelayTimeout
     *
     * @return self
     */
    public function setNoAnswerDelayTimeout($noAnswerDelayTimeout)
    {
        if (is_null($noAnswerDelayTimeout)) {
            array_push($this->openAPINullablesSetToNull, 'noAnswerDelayTimeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('noAnswerDelayTimeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['noAnswerDelayTimeout'] = $noAnswerDelayTimeout;

        return $this;
    }

    /**
     * Gets rejectTimeout
     *
     * @return mixed|null
     */
    public function getRejectTimeout()
    {
        return $this->container['rejectTimeout'];
    }

    /**
     * Sets rejectTimeout
     *
     * @param mixed|null $rejectTimeout rejectTimeout
     *
     * @return self
     */
    public function setRejectTimeout($rejectTimeout)
    {
        if (is_null($rejectTimeout)) {
            array_push($this->openAPINullablesSetToNull, 'rejectTimeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rejectTimeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rejectTimeout'] = $rejectTimeout;

        return $this;
    }

    /**
     * Gets busyTimeout
     *
     * @return mixed|null
     */
    public function getBusyTimeout()
    {
        return $this->container['busyTimeout'];
    }

    /**
     * Sets busyTimeout
     *
     * @param mixed|null $busyTimeout busyTimeout
     *
     * @return self
     */
    public function setBusyTimeout($busyTimeout)
    {
        if (is_null($busyTimeout)) {
            array_push($this->openAPINullablesSetToNull, 'busyTimeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('busyTimeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['busyTimeout'] = $busyTimeout;

        return $this;
    }

    /**
     * Gets wrapUpTimeout
     *
     * @return mixed|null
     */
    public function getWrapUpTimeout()
    {
        return $this->container['wrapUpTimeout'];
    }

    /**
     * Sets wrapUpTimeout
     *
     * @param mixed|null $wrapUpTimeout wrapUpTimeout
     *
     * @return self
     */
    public function setWrapUpTimeout($wrapUpTimeout)
    {
        if (is_null($wrapUpTimeout)) {
            array_push($this->openAPINullablesSetToNull, 'wrapUpTimeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wrapUpTimeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wrapUpTimeout'] = $wrapUpTimeout;

        return $this;
    }

    /**
     * Gets timeBasedScore
     *
     * @return mixed
     */
    public function getTimeBasedScore()
    {
        return $this->container['timeBasedScore'];
    }

    /**
     * Sets timeBasedScore
     *
     * @param mixed $timeBasedScore timeBasedScore
     *
     * @return self
     */
    public function setTimeBasedScore($timeBasedScore)
    {
        if (is_null($timeBasedScore)) {
            array_push($this->openAPINullablesSetToNull, 'timeBasedScore');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeBasedScore', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTimeBasedScoreAllowableValues();
        if (!is_null($timeBasedScore) && !in_array($timeBasedScore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timeBasedScore', must be one of '%s'",
                    $timeBasedScore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timeBasedScore'] = $timeBasedScore;

        return $this;
    }

    /**
     * Gets tierRulesApply
     *
     * @return mixed
     */
    public function getTierRulesApply()
    {
        return $this->container['tierRulesApply'];
    }

    /**
     * Sets tierRulesApply
     *
     * @param mixed $tierRulesApply tierRulesApply
     *
     * @return self
     */
    public function setTierRulesApply($tierRulesApply)
    {
        if (is_null($tierRulesApply)) {
            array_push($this->openAPINullablesSetToNull, 'tierRulesApply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierRulesApply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTierRulesApplyAllowableValues();
        if (!is_null($tierRulesApply) && !in_array($tierRulesApply, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tierRulesApply', must be one of '%s'",
                    $tierRulesApply,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tierRulesApply'] = $tierRulesApply;

        return $this;
    }

    /**
     * Gets tierRuleNoAgentNoWait
     *
     * @return mixed
     */
    public function getTierRuleNoAgentNoWait()
    {
        return $this->container['tierRuleNoAgentNoWait'];
    }

    /**
     * Sets tierRuleNoAgentNoWait
     *
     * @param mixed $tierRuleNoAgentNoWait tierRuleNoAgentNoWait
     *
     * @return self
     */
    public function setTierRuleNoAgentNoWait($tierRuleNoAgentNoWait)
    {
        if (is_null($tierRuleNoAgentNoWait)) {
            array_push($this->openAPINullablesSetToNull, 'tierRuleNoAgentNoWait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierRuleNoAgentNoWait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTierRuleNoAgentNoWaitAllowableValues();
        if (!is_null($tierRuleNoAgentNoWait) && !in_array($tierRuleNoAgentNoWait, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tierRuleNoAgentNoWait', must be one of '%s'",
                    $tierRuleNoAgentNoWait,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tierRuleNoAgentNoWait'] = $tierRuleNoAgentNoWait;

        return $this;
    }

    /**
     * Gets tierRuleWaitSecond
     *
     * @return mixed|null
     */
    public function getTierRuleWaitSecond()
    {
        return $this->container['tierRuleWaitSecond'];
    }

    /**
     * Sets tierRuleWaitSecond
     *
     * @param mixed|null $tierRuleWaitSecond tierRuleWaitSecond
     *
     * @return self
     */
    public function setTierRuleWaitSecond($tierRuleWaitSecond)
    {
        if (is_null($tierRuleWaitSecond)) {
            array_push($this->openAPINullablesSetToNull, 'tierRuleWaitSecond');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierRuleWaitSecond', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tierRuleWaitSecond'] = $tierRuleWaitSecond;

        return $this;
    }

    /**
     * Gets tierRuleWaitMultiplyLevel
     *
     * @return mixed
     */
    public function getTierRuleWaitMultiplyLevel()
    {
        return $this->container['tierRuleWaitMultiplyLevel'];
    }

    /**
     * Sets tierRuleWaitMultiplyLevel
     *
     * @param mixed $tierRuleWaitMultiplyLevel tierRuleWaitMultiplyLevel
     *
     * @return self
     */
    public function setTierRuleWaitMultiplyLevel($tierRuleWaitMultiplyLevel)
    {
        if (is_null($tierRuleWaitMultiplyLevel)) {
            array_push($this->openAPINullablesSetToNull, 'tierRuleWaitMultiplyLevel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierRuleWaitMultiplyLevel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTierRuleWaitMultiplyLevelAllowableValues();
        if (!is_null($tierRuleWaitMultiplyLevel) && !in_array($tierRuleWaitMultiplyLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tierRuleWaitMultiplyLevel', must be one of '%s'",
                    $tierRuleWaitMultiplyLevel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tierRuleWaitMultiplyLevel'] = $tierRuleWaitMultiplyLevel;

        return $this;
    }

    /**
     * Gets abandonedResumeAllowed
     *
     * @return mixed
     */
    public function getAbandonedResumeAllowed()
    {
        return $this->container['abandonedResumeAllowed'];
    }

    /**
     * Sets abandonedResumeAllowed
     *
     * @param mixed $abandonedResumeAllowed abandonedResumeAllowed
     *
     * @return self
     */
    public function setAbandonedResumeAllowed($abandonedResumeAllowed)
    {
        if (is_null($abandonedResumeAllowed)) {
            array_push($this->openAPINullablesSetToNull, 'abandonedResumeAllowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abandonedResumeAllowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAbandonedResumeAllowedAllowableValues();
        if (!is_null($abandonedResumeAllowed) && !in_array($abandonedResumeAllowed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'abandonedResumeAllowed', must be one of '%s'",
                    $abandonedResumeAllowed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['abandonedResumeAllowed'] = $abandonedResumeAllowed;

        return $this;
    }

    /**
     * Gets discardAbandonedAfter
     *
     * @return mixed|null
     */
    public function getDiscardAbandonedAfter()
    {
        return $this->container['discardAbandonedAfter'];
    }

    /**
     * Sets discardAbandonedAfter
     *
     * @param mixed|null $discardAbandonedAfter discardAbandonedAfter
     *
     * @return self
     */
    public function setDiscardAbandonedAfter($discardAbandonedAfter)
    {
        if (is_null($discardAbandonedAfter)) {
            array_push($this->openAPINullablesSetToNull, 'discardAbandonedAfter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discardAbandonedAfter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discardAbandonedAfter'] = $discardAbandonedAfter;

        return $this;
    }

    /**
     * Gets maxWaitTimeNoAgentTimeReached
     *
     * @return mixed
     */
    public function getMaxWaitTimeNoAgentTimeReached()
    {
        return $this->container['maxWaitTimeNoAgentTimeReached'];
    }

    /**
     * Sets maxWaitTimeNoAgentTimeReached
     *
     * @param mixed $maxWaitTimeNoAgentTimeReached maxWaitTimeNoAgentTimeReached
     *
     * @return self
     */
    public function setMaxWaitTimeNoAgentTimeReached($maxWaitTimeNoAgentTimeReached)
    {
        if (is_null($maxWaitTimeNoAgentTimeReached)) {
            array_push($this->openAPINullablesSetToNull, 'maxWaitTimeNoAgentTimeReached');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxWaitTimeNoAgentTimeReached', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxWaitTimeNoAgentTimeReached'] = $maxWaitTimeNoAgentTimeReached;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


