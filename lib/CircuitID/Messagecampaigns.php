<?php
/**
 * Messagecampaigns
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.8
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Messagecampaigns Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Messagecampaigns implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messagecampaigns';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'mixed',
        'campaignId' => 'mixed',
        'brandId' => 'mixed',
        'order' => 'mixed',
        'subscriberOptin' => 'mixed',
        'subscriberOptout' => 'mixed',
        'subscriberHelp' => 'mixed',
        'numberPool' => 'mixed',
        'directLending' => 'mixed',
        'embeddedLink' => 'mixed',
        'embeddedPhone' => 'mixed',
        'affiliateMarketing' => 'mixed',
        'ageGated' => 'mixed',
        'mnos' => 'mixed',
        'referenceId' => 'mixed',
        'useCase' => 'mixed',
        'subUseCases' => 'mixed',
        'sample1' => 'mixed',
        'sample2' => 'mixed',
        'sample3' => 'mixed',
        'sample4' => 'mixed',
        'sample5' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'campaignId' => null,
        'brandId' => null,
        'order' => null,
        'subscriberOptin' => 'int32',
        'subscriberOptout' => 'int32',
        'subscriberHelp' => 'int32',
        'numberPool' => 'int32',
        'directLending' => 'int32',
        'embeddedLink' => 'int32',
        'embeddedPhone' => 'int32',
        'affiliateMarketing' => 'int32',
        'ageGated' => 'int32',
        'mnos' => null,
        'referenceId' => null,
        'useCase' => null,
        'subUseCases' => null,
        'sample1' => null,
        'sample2' => null,
        'sample3' => null,
        'sample4' => null,
        'sample5' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'campaignId' => true,
		'brandId' => true,
		'order' => true,
		'subscriberOptin' => true,
		'subscriberOptout' => true,
		'subscriberHelp' => true,
		'numberPool' => true,
		'directLending' => true,
		'embeddedLink' => true,
		'embeddedPhone' => true,
		'affiliateMarketing' => true,
		'ageGated' => true,
		'mnos' => true,
		'referenceId' => true,
		'useCase' => true,
		'subUseCases' => true,
		'sample1' => true,
		'sample2' => true,
		'sample3' => true,
		'sample4' => true,
		'sample5' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'campaignId' => 'campaignId',
        'brandId' => 'brandId',
        'order' => 'order',
        'subscriberOptin' => 'subscriberOptin',
        'subscriberOptout' => 'subscriberOptout',
        'subscriberHelp' => 'subscriberHelp',
        'numberPool' => 'numberPool',
        'directLending' => 'directLending',
        'embeddedLink' => 'embeddedLink',
        'embeddedPhone' => 'embeddedPhone',
        'affiliateMarketing' => 'affiliateMarketing',
        'ageGated' => 'ageGated',
        'mnos' => 'mnos',
        'referenceId' => 'referenceId',
        'useCase' => 'useCase',
        'subUseCases' => 'subUseCases',
        'sample1' => 'sample1',
        'sample2' => 'sample2',
        'sample3' => 'sample3',
        'sample4' => 'sample4',
        'sample5' => 'sample5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'campaignId' => 'setCampaignId',
        'brandId' => 'setBrandId',
        'order' => 'setOrder',
        'subscriberOptin' => 'setSubscriberOptin',
        'subscriberOptout' => 'setSubscriberOptout',
        'subscriberHelp' => 'setSubscriberHelp',
        'numberPool' => 'setNumberPool',
        'directLending' => 'setDirectLending',
        'embeddedLink' => 'setEmbeddedLink',
        'embeddedPhone' => 'setEmbeddedPhone',
        'affiliateMarketing' => 'setAffiliateMarketing',
        'ageGated' => 'setAgeGated',
        'mnos' => 'setMnos',
        'referenceId' => 'setReferenceId',
        'useCase' => 'setUseCase',
        'subUseCases' => 'setSubUseCases',
        'sample1' => 'setSample1',
        'sample2' => 'setSample2',
        'sample3' => 'setSample3',
        'sample4' => 'setSample4',
        'sample5' => 'setSample5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'campaignId' => 'getCampaignId',
        'brandId' => 'getBrandId',
        'order' => 'getOrder',
        'subscriberOptin' => 'getSubscriberOptin',
        'subscriberOptout' => 'getSubscriberOptout',
        'subscriberHelp' => 'getSubscriberHelp',
        'numberPool' => 'getNumberPool',
        'directLending' => 'getDirectLending',
        'embeddedLink' => 'getEmbeddedLink',
        'embeddedPhone' => 'getEmbeddedPhone',
        'affiliateMarketing' => 'getAffiliateMarketing',
        'ageGated' => 'getAgeGated',
        'mnos' => 'getMnos',
        'referenceId' => 'getReferenceId',
        'useCase' => 'getUseCase',
        'subUseCases' => 'getSubUseCases',
        'sample1' => 'getSample1',
        'sample2' => 'getSample2',
        'sample3' => 'getSample3',
        'sample4' => 'getSample4',
        'sample5' => 'getSample5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUBSCRIBER_OPTIN__1 = '1';
    public const SUBSCRIBER_OPTIN__0 = '0';
    public const SUBSCRIBER_OPTOUT__1 = '1';
    public const SUBSCRIBER_OPTOUT__0 = '0';
    public const SUBSCRIBER_HELP__1 = '1';
    public const SUBSCRIBER_HELP__0 = '0';
    public const NUMBER_POOL__1 = '1';
    public const NUMBER_POOL__0 = '0';
    public const DIRECT_LENDING__1 = '1';
    public const DIRECT_LENDING__0 = '0';
    public const EMBEDDED_LINK__1 = '1';
    public const EMBEDDED_LINK__0 = '0';
    public const EMBEDDED_PHONE__1 = '1';
    public const EMBEDDED_PHONE__0 = '0';
    public const AFFILIATE_MARKETING__1 = '1';
    public const AFFILIATE_MARKETING__0 = '0';
    public const AGE_GATED__1 = '1';
    public const AGE_GATED__0 = '0';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriberOptinAllowableValues()
    {
        return [
            self::SUBSCRIBER_OPTIN__1,
            self::SUBSCRIBER_OPTIN__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriberOptoutAllowableValues()
    {
        return [
            self::SUBSCRIBER_OPTOUT__1,
            self::SUBSCRIBER_OPTOUT__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriberHelpAllowableValues()
    {
        return [
            self::SUBSCRIBER_HELP__1,
            self::SUBSCRIBER_HELP__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberPoolAllowableValues()
    {
        return [
            self::NUMBER_POOL__1,
            self::NUMBER_POOL__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectLendingAllowableValues()
    {
        return [
            self::DIRECT_LENDING__1,
            self::DIRECT_LENDING__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmbeddedLinkAllowableValues()
    {
        return [
            self::EMBEDDED_LINK__1,
            self::EMBEDDED_LINK__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmbeddedPhoneAllowableValues()
    {
        return [
            self::EMBEDDED_PHONE__1,
            self::EMBEDDED_PHONE__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAffiliateMarketingAllowableValues()
    {
        return [
            self::AFFILIATE_MARKETING__1,
            self::AFFILIATE_MARKETING__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgeGatedAllowableValues()
    {
        return [
            self::AGE_GATED__1,
            self::AGE_GATED__0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('campaignId', $data ?? [], null);
        $this->setIfExists('brandId', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('subscriberOptin', $data ?? [], null);
        $this->setIfExists('subscriberOptout', $data ?? [], null);
        $this->setIfExists('subscriberHelp', $data ?? [], null);
        $this->setIfExists('numberPool', $data ?? [], null);
        $this->setIfExists('directLending', $data ?? [], null);
        $this->setIfExists('embeddedLink', $data ?? [], null);
        $this->setIfExists('embeddedPhone', $data ?? [], null);
        $this->setIfExists('affiliateMarketing', $data ?? [], null);
        $this->setIfExists('ageGated', $data ?? [], null);
        $this->setIfExists('mnos', $data ?? [], null);
        $this->setIfExists('referenceId', $data ?? [], null);
        $this->setIfExists('useCase', $data ?? [], null);
        $this->setIfExists('subUseCases', $data ?? [], null);
        $this->setIfExists('sample1', $data ?? [], null);
        $this->setIfExists('sample2', $data ?? [], null);
        $this->setIfExists('sample3', $data ?? [], null);
        $this->setIfExists('sample4', $data ?? [], null);
        $this->setIfExists('sample5', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 45)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['campaignId']) && (mb_strlen($this->container['campaignId']) > 45)) {
            $invalidProperties[] = "invalid value for 'campaignId', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['brandId'] === null) {
            $invalidProperties[] = "'brandId' can't be null";
        }
        if ((mb_strlen($this->container['brandId']) > 45)) {
            $invalidProperties[] = "invalid value for 'brandId', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        $allowedValues = $this->getSubscriberOptinAllowableValues();
        if (!is_null($this->container['subscriberOptin']) && !in_array($this->container['subscriberOptin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subscriberOptin', must be one of '%s'",
                $this->container['subscriberOptin'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubscriberOptoutAllowableValues();
        if (!is_null($this->container['subscriberOptout']) && !in_array($this->container['subscriberOptout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subscriberOptout', must be one of '%s'",
                $this->container['subscriberOptout'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubscriberHelpAllowableValues();
        if (!is_null($this->container['subscriberHelp']) && !in_array($this->container['subscriberHelp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subscriberHelp', must be one of '%s'",
                $this->container['subscriberHelp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNumberPoolAllowableValues();
        if (!is_null($this->container['numberPool']) && !in_array($this->container['numberPool'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'numberPool', must be one of '%s'",
                $this->container['numberPool'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectLendingAllowableValues();
        if (!is_null($this->container['directLending']) && !in_array($this->container['directLending'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'directLending', must be one of '%s'",
                $this->container['directLending'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmbeddedLinkAllowableValues();
        if (!is_null($this->container['embeddedLink']) && !in_array($this->container['embeddedLink'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'embeddedLink', must be one of '%s'",
                $this->container['embeddedLink'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmbeddedPhoneAllowableValues();
        if (!is_null($this->container['embeddedPhone']) && !in_array($this->container['embeddedPhone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'embeddedPhone', must be one of '%s'",
                $this->container['embeddedPhone'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAffiliateMarketingAllowableValues();
        if (!is_null($this->container['affiliateMarketing']) && !in_array($this->container['affiliateMarketing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'affiliateMarketing', must be one of '%s'",
                $this->container['affiliateMarketing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAgeGatedAllowableValues();
        if (!is_null($this->container['ageGated']) && !in_array($this->container['ageGated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ageGated', must be one of '%s'",
                $this->container['ageGated'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['referenceId']) && (mb_strlen($this->container['referenceId']) > 45)) {
            $invalidProperties[] = "invalid value for 'referenceId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['useCase']) && (mb_strlen($this->container['useCase']) > 45)) {
            $invalidProperties[] = "invalid value for 'useCase', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['sample1']) && (mb_strlen($this->container['sample1']) > 255)) {
            $invalidProperties[] = "invalid value for 'sample1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sample2']) && (mb_strlen($this->container['sample2']) > 255)) {
            $invalidProperties[] = "invalid value for 'sample2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sample3']) && (mb_strlen($this->container['sample3']) > 255)) {
            $invalidProperties[] = "invalid value for 'sample3', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sample4']) && (mb_strlen($this->container['sample4']) > 255)) {
            $invalidProperties[] = "invalid value for 'sample4', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sample5']) && (mb_strlen($this->container['sample5']) > 255)) {
            $invalidProperties[] = "invalid value for 'sample5', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Messagecampaigns., must be smaller than or equal to 45.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return mixed|null
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param mixed|null $campaignId campaignId
     *
     * @return self
     */
    public function setCampaignId($campaignId)
    {
        if (is_null($campaignId)) {
            array_push($this->openAPINullablesSetToNull, 'campaignId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaignId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($campaignId) && (mb_strlen($campaignId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $campaignId when calling Messagecampaigns., must be smaller than or equal to 45.');
        }

        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets brandId
     *
     * @return mixed
     */
    public function getBrandId()
    {
        return $this->container['brandId'];
    }

    /**
     * Sets brandId
     *
     * @param mixed $brandId brandId
     *
     * @return self
     */
    public function setBrandId($brandId)
    {
        if (is_null($brandId)) {
            array_push($this->openAPINullablesSetToNull, 'brandId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brandId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($brandId) && (mb_strlen($brandId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $brandId when calling Messagecampaigns., must be smaller than or equal to 45.');
        }

        $this->container['brandId'] = $brandId;

        return $this;
    }

    /**
     * Gets order
     *
     * @return mixed
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param mixed $order ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets subscriberOptin
     *
     * @return mixed|null
     */
    public function getSubscriberOptin()
    {
        return $this->container['subscriberOptin'];
    }

    /**
     * Sets subscriberOptin
     *
     * @param mixed|null $subscriberOptin subscriberOptin
     *
     * @return self
     */
    public function setSubscriberOptin($subscriberOptin)
    {
        if (is_null($subscriberOptin)) {
            array_push($this->openAPINullablesSetToNull, 'subscriberOptin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriberOptin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSubscriberOptinAllowableValues();
        if (!is_null($subscriberOptin) && !in_array($subscriberOptin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subscriberOptin', must be one of '%s'",
                    $subscriberOptin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscriberOptin'] = $subscriberOptin;

        return $this;
    }

    /**
     * Gets subscriberOptout
     *
     * @return mixed|null
     */
    public function getSubscriberOptout()
    {
        return $this->container['subscriberOptout'];
    }

    /**
     * Sets subscriberOptout
     *
     * @param mixed|null $subscriberOptout subscriberOptout
     *
     * @return self
     */
    public function setSubscriberOptout($subscriberOptout)
    {
        if (is_null($subscriberOptout)) {
            array_push($this->openAPINullablesSetToNull, 'subscriberOptout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriberOptout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSubscriberOptoutAllowableValues();
        if (!is_null($subscriberOptout) && !in_array($subscriberOptout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subscriberOptout', must be one of '%s'",
                    $subscriberOptout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscriberOptout'] = $subscriberOptout;

        return $this;
    }

    /**
     * Gets subscriberHelp
     *
     * @return mixed|null
     */
    public function getSubscriberHelp()
    {
        return $this->container['subscriberHelp'];
    }

    /**
     * Sets subscriberHelp
     *
     * @param mixed|null $subscriberHelp subscriberHelp
     *
     * @return self
     */
    public function setSubscriberHelp($subscriberHelp)
    {
        if (is_null($subscriberHelp)) {
            array_push($this->openAPINullablesSetToNull, 'subscriberHelp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriberHelp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSubscriberHelpAllowableValues();
        if (!is_null($subscriberHelp) && !in_array($subscriberHelp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subscriberHelp', must be one of '%s'",
                    $subscriberHelp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscriberHelp'] = $subscriberHelp;

        return $this;
    }

    /**
     * Gets numberPool
     *
     * @return mixed|null
     */
    public function getNumberPool()
    {
        return $this->container['numberPool'];
    }

    /**
     * Sets numberPool
     *
     * @param mixed|null $numberPool numberPool
     *
     * @return self
     */
    public function setNumberPool($numberPool)
    {
        if (is_null($numberPool)) {
            array_push($this->openAPINullablesSetToNull, 'numberPool');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberPool', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getNumberPoolAllowableValues();
        if (!is_null($numberPool) && !in_array($numberPool, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'numberPool', must be one of '%s'",
                    $numberPool,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['numberPool'] = $numberPool;

        return $this;
    }

    /**
     * Gets directLending
     *
     * @return mixed|null
     */
    public function getDirectLending()
    {
        return $this->container['directLending'];
    }

    /**
     * Sets directLending
     *
     * @param mixed|null $directLending directLending
     *
     * @return self
     */
    public function setDirectLending($directLending)
    {
        if (is_null($directLending)) {
            array_push($this->openAPINullablesSetToNull, 'directLending');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directLending', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDirectLendingAllowableValues();
        if (!is_null($directLending) && !in_array($directLending, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'directLending', must be one of '%s'",
                    $directLending,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['directLending'] = $directLending;

        return $this;
    }

    /**
     * Gets embeddedLink
     *
     * @return mixed|null
     */
    public function getEmbeddedLink()
    {
        return $this->container['embeddedLink'];
    }

    /**
     * Sets embeddedLink
     *
     * @param mixed|null $embeddedLink embeddedLink
     *
     * @return self
     */
    public function setEmbeddedLink($embeddedLink)
    {
        if (is_null($embeddedLink)) {
            array_push($this->openAPINullablesSetToNull, 'embeddedLink');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('embeddedLink', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getEmbeddedLinkAllowableValues();
        if (!is_null($embeddedLink) && !in_array($embeddedLink, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'embeddedLink', must be one of '%s'",
                    $embeddedLink,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['embeddedLink'] = $embeddedLink;

        return $this;
    }

    /**
     * Gets embeddedPhone
     *
     * @return mixed|null
     */
    public function getEmbeddedPhone()
    {
        return $this->container['embeddedPhone'];
    }

    /**
     * Sets embeddedPhone
     *
     * @param mixed|null $embeddedPhone embeddedPhone
     *
     * @return self
     */
    public function setEmbeddedPhone($embeddedPhone)
    {
        if (is_null($embeddedPhone)) {
            array_push($this->openAPINullablesSetToNull, 'embeddedPhone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('embeddedPhone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getEmbeddedPhoneAllowableValues();
        if (!is_null($embeddedPhone) && !in_array($embeddedPhone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'embeddedPhone', must be one of '%s'",
                    $embeddedPhone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['embeddedPhone'] = $embeddedPhone;

        return $this;
    }

    /**
     * Gets affiliateMarketing
     *
     * @return mixed|null
     */
    public function getAffiliateMarketing()
    {
        return $this->container['affiliateMarketing'];
    }

    /**
     * Sets affiliateMarketing
     *
     * @param mixed|null $affiliateMarketing affiliateMarketing
     *
     * @return self
     */
    public function setAffiliateMarketing($affiliateMarketing)
    {
        if (is_null($affiliateMarketing)) {
            array_push($this->openAPINullablesSetToNull, 'affiliateMarketing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliateMarketing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAffiliateMarketingAllowableValues();
        if (!is_null($affiliateMarketing) && !in_array($affiliateMarketing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'affiliateMarketing', must be one of '%s'",
                    $affiliateMarketing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['affiliateMarketing'] = $affiliateMarketing;

        return $this;
    }

    /**
     * Gets ageGated
     *
     * @return mixed|null
     */
    public function getAgeGated()
    {
        return $this->container['ageGated'];
    }

    /**
     * Sets ageGated
     *
     * @param mixed|null $ageGated ageGated
     *
     * @return self
     */
    public function setAgeGated($ageGated)
    {
        if (is_null($ageGated)) {
            array_push($this->openAPINullablesSetToNull, 'ageGated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ageGated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAgeGatedAllowableValues();
        if (!is_null($ageGated) && !in_array($ageGated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ageGated', must be one of '%s'",
                    $ageGated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ageGated'] = $ageGated;

        return $this;
    }

    /**
     * Gets mnos
     *
     * @return mixed|null
     */
    public function getMnos()
    {
        return $this->container['mnos'];
    }

    /**
     * Sets mnos
     *
     * @param mixed|null $mnos mnos
     *
     * @return self
     */
    public function setMnos($mnos)
    {
        if (is_null($mnos)) {
            array_push($this->openAPINullablesSetToNull, 'mnos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mnos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mnos'] = $mnos;

        return $this;
    }

    /**
     * Gets referenceId
     *
     * @return mixed|null
     */
    public function getReferenceId()
    {
        return $this->container['referenceId'];
    }

    /**
     * Sets referenceId
     *
     * @param mixed|null $referenceId referenceId
     *
     * @return self
     */
    public function setReferenceId($referenceId)
    {
        if (is_null($referenceId)) {
            array_push($this->openAPINullablesSetToNull, 'referenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referenceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($referenceId) && (mb_strlen($referenceId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $referenceId when calling Messagecampaigns., must be smaller than or equal to 45.');
        }

        $this->container['referenceId'] = $referenceId;

        return $this;
    }

    /**
     * Gets useCase
     *
     * @return mixed|null
     */
    public function getUseCase()
    {
        return $this->container['useCase'];
    }

    /**
     * Sets useCase
     *
     * @param mixed|null $useCase useCase
     *
     * @return self
     */
    public function setUseCase($useCase)
    {
        if (is_null($useCase)) {
            array_push($this->openAPINullablesSetToNull, 'useCase');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('useCase', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($useCase) && (mb_strlen($useCase) > 45)) {
            throw new \InvalidArgumentException('invalid length for $useCase when calling Messagecampaigns., must be smaller than or equal to 45.');
        }

        $this->container['useCase'] = $useCase;

        return $this;
    }

    /**
     * Gets subUseCases
     *
     * @return mixed|null
     */
    public function getSubUseCases()
    {
        return $this->container['subUseCases'];
    }

    /**
     * Sets subUseCases
     *
     * @param mixed|null $subUseCases subUseCases
     *
     * @return self
     */
    public function setSubUseCases($subUseCases)
    {
        if (is_null($subUseCases)) {
            array_push($this->openAPINullablesSetToNull, 'subUseCases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subUseCases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subUseCases'] = $subUseCases;

        return $this;
    }

    /**
     * Gets sample1
     *
     * @return mixed|null
     */
    public function getSample1()
    {
        return $this->container['sample1'];
    }

    /**
     * Sets sample1
     *
     * @param mixed|null $sample1 sample1
     *
     * @return self
     */
    public function setSample1($sample1)
    {
        if (is_null($sample1)) {
            array_push($this->openAPINullablesSetToNull, 'sample1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sample1) && (mb_strlen($sample1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sample1 when calling Messagecampaigns., must be smaller than or equal to 255.');
        }

        $this->container['sample1'] = $sample1;

        return $this;
    }

    /**
     * Gets sample2
     *
     * @return mixed|null
     */
    public function getSample2()
    {
        return $this->container['sample2'];
    }

    /**
     * Sets sample2
     *
     * @param mixed|null $sample2 sample2
     *
     * @return self
     */
    public function setSample2($sample2)
    {
        if (is_null($sample2)) {
            array_push($this->openAPINullablesSetToNull, 'sample2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sample2) && (mb_strlen($sample2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sample2 when calling Messagecampaigns., must be smaller than or equal to 255.');
        }

        $this->container['sample2'] = $sample2;

        return $this;
    }

    /**
     * Gets sample3
     *
     * @return mixed|null
     */
    public function getSample3()
    {
        return $this->container['sample3'];
    }

    /**
     * Sets sample3
     *
     * @param mixed|null $sample3 sample3
     *
     * @return self
     */
    public function setSample3($sample3)
    {
        if (is_null($sample3)) {
            array_push($this->openAPINullablesSetToNull, 'sample3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sample3) && (mb_strlen($sample3) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sample3 when calling Messagecampaigns., must be smaller than or equal to 255.');
        }

        $this->container['sample3'] = $sample3;

        return $this;
    }

    /**
     * Gets sample4
     *
     * @return mixed|null
     */
    public function getSample4()
    {
        return $this->container['sample4'];
    }

    /**
     * Sets sample4
     *
     * @param mixed|null $sample4 sample4
     *
     * @return self
     */
    public function setSample4($sample4)
    {
        if (is_null($sample4)) {
            array_push($this->openAPINullablesSetToNull, 'sample4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sample4) && (mb_strlen($sample4) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sample4 when calling Messagecampaigns., must be smaller than or equal to 255.');
        }

        $this->container['sample4'] = $sample4;

        return $this;
    }

    /**
     * Gets sample5
     *
     * @return mixed|null
     */
    public function getSample5()
    {
        return $this->container['sample5'];
    }

    /**
     * Sets sample5
     *
     * @param mixed|null $sample5 sample5
     *
     * @return self
     */
    public function setSample5($sample5)
    {
        if (is_null($sample5)) {
            array_push($this->openAPINullablesSetToNull, 'sample5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sample5) && (mb_strlen($sample5) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sample5 when calling Messagecampaigns., must be smaller than or equal to 255.');
        }

        $this->container['sample5'] = $sample5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


