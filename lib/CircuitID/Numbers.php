<?php
/**
 * Numbers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.15
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Numbers Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Numbers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'numbers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inUse' => 'mixed',
        'name' => 'mixed',
        'countryCode' => 'mixed',
        'amount' => 'mixed',
        'perMinuteRate' => 'mixed',
        'provider' => 'mixed',
        'originalProvider' => 'mixed',
        'providerOrderId' => 'mixed',
        'fax' => 'mixed',
        'voice' => 'mixed',
        'status' => 'mixed',
        'sms' => 'mixed',
        'mms' => 'mixed',
        'changeRegionOrderId' => 'mixed',
        'changeRegionOrderDate' => 'mixed',
        'directoryListing' => 'mixed',
        'directoryListingOrderId' => 'mixed',
        'directoryListingOrderDate' => 'mixed',
        'callerName' => 'mixed',
        'callerNameOrderId' => 'mixed',
        'callerNameOrderDate' => 'mixed',
        'e911' => 'mixed',
        'e911OrderId' => 'mixed',
        'e911OrderDate' => 'mixed',
        'messageCampaign' => 'mixed',
        'messageClass' => 'mixed',
        'messageType' => 'mixed',
        'messageCampaignOrderId' => 'mixed',
        'messageCampaignOrderDate' => 'mixed',
        'e911Supported' => 'mixed',
        'callerNameSupported' => 'mixed',
        'directoryListingSupported' => 'mixed',
        'messagingSupported' => 'mixed',
        'destinationType' => 'mixed',
        'destination' => 'mixed',
        'ref' => 'mixed',
        'callForwardingDestination' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inUse' => 'int32',
        'name' => null,
        'countryCode' => null,
        'amount' => 'int32',
        'perMinuteRate' => 'int32',
        'provider' => null,
        'originalProvider' => null,
        'providerOrderId' => null,
        'fax' => 'int32',
        'voice' => 'int32',
        'status' => 'int32',
        'sms' => 'int32',
        'mms' => 'int32',
        'changeRegionOrderId' => null,
        'changeRegionOrderDate' => 'date-time',
        'directoryListing' => null,
        'directoryListingOrderId' => null,
        'directoryListingOrderDate' => 'date-time',
        'callerName' => null,
        'callerNameOrderId' => null,
        'callerNameOrderDate' => 'date-time',
        'e911' => null,
        'e911OrderId' => null,
        'e911OrderDate' => 'date-time',
        'messageCampaign' => null,
        'messageClass' => null,
        'messageType' => null,
        'messageCampaignOrderId' => null,
        'messageCampaignOrderDate' => 'date-time',
        'e911Supported' => 'int32',
        'callerNameSupported' => 'int32',
        'directoryListingSupported' => 'int32',
        'messagingSupported' => 'int32',
        'destinationType' => null,
        'destination' => null,
        'ref' => null,
        'callForwardingDestination' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inUse' => true,
		'name' => true,
		'countryCode' => true,
		'amount' => true,
		'perMinuteRate' => true,
		'provider' => true,
		'originalProvider' => true,
		'providerOrderId' => true,
		'fax' => true,
		'voice' => true,
		'status' => true,
		'sms' => true,
		'mms' => true,
		'changeRegionOrderId' => true,
		'changeRegionOrderDate' => true,
		'directoryListing' => true,
		'directoryListingOrderId' => true,
		'directoryListingOrderDate' => true,
		'callerName' => true,
		'callerNameOrderId' => true,
		'callerNameOrderDate' => true,
		'e911' => true,
		'e911OrderId' => true,
		'e911OrderDate' => true,
		'messageCampaign' => true,
		'messageClass' => true,
		'messageType' => true,
		'messageCampaignOrderId' => true,
		'messageCampaignOrderDate' => true,
		'e911Supported' => true,
		'callerNameSupported' => true,
		'directoryListingSupported' => true,
		'messagingSupported' => true,
		'destinationType' => true,
		'destination' => true,
		'ref' => true,
		'callForwardingDestination' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inUse' => 'inUse',
        'name' => 'name',
        'countryCode' => 'countryCode',
        'amount' => 'amount',
        'perMinuteRate' => 'perMinuteRate',
        'provider' => 'provider',
        'originalProvider' => 'originalProvider',
        'providerOrderId' => 'providerOrderId',
        'fax' => 'fax',
        'voice' => 'voice',
        'status' => 'status',
        'sms' => 'sms',
        'mms' => 'mms',
        'changeRegionOrderId' => 'changeRegionOrderId',
        'changeRegionOrderDate' => 'changeRegionOrderDate',
        'directoryListing' => 'directoryListing',
        'directoryListingOrderId' => 'directoryListingOrderId',
        'directoryListingOrderDate' => 'directoryListingOrderDate',
        'callerName' => 'callerName',
        'callerNameOrderId' => 'callerNameOrderId',
        'callerNameOrderDate' => 'callerNameOrderDate',
        'e911' => 'e911',
        'e911OrderId' => 'e911OrderId',
        'e911OrderDate' => 'e911OrderDate',
        'messageCampaign' => 'messageCampaign',
        'messageClass' => 'messageClass',
        'messageType' => 'messageType',
        'messageCampaignOrderId' => 'messageCampaignOrderId',
        'messageCampaignOrderDate' => 'messageCampaignOrderDate',
        'e911Supported' => 'e911Supported',
        'callerNameSupported' => 'callerNameSupported',
        'directoryListingSupported' => 'directoryListingSupported',
        'messagingSupported' => 'messagingSupported',
        'destinationType' => 'destinationType',
        'destination' => 'destination',
        'ref' => 'ref',
        'callForwardingDestination' => 'callForwardingDestination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inUse' => 'setInUse',
        'name' => 'setName',
        'countryCode' => 'setCountryCode',
        'amount' => 'setAmount',
        'perMinuteRate' => 'setPerMinuteRate',
        'provider' => 'setProvider',
        'originalProvider' => 'setOriginalProvider',
        'providerOrderId' => 'setProviderOrderId',
        'fax' => 'setFax',
        'voice' => 'setVoice',
        'status' => 'setStatus',
        'sms' => 'setSms',
        'mms' => 'setMms',
        'changeRegionOrderId' => 'setChangeRegionOrderId',
        'changeRegionOrderDate' => 'setChangeRegionOrderDate',
        'directoryListing' => 'setDirectoryListing',
        'directoryListingOrderId' => 'setDirectoryListingOrderId',
        'directoryListingOrderDate' => 'setDirectoryListingOrderDate',
        'callerName' => 'setCallerName',
        'callerNameOrderId' => 'setCallerNameOrderId',
        'callerNameOrderDate' => 'setCallerNameOrderDate',
        'e911' => 'setE911',
        'e911OrderId' => 'setE911OrderId',
        'e911OrderDate' => 'setE911OrderDate',
        'messageCampaign' => 'setMessageCampaign',
        'messageClass' => 'setMessageClass',
        'messageType' => 'setMessageType',
        'messageCampaignOrderId' => 'setMessageCampaignOrderId',
        'messageCampaignOrderDate' => 'setMessageCampaignOrderDate',
        'e911Supported' => 'setE911Supported',
        'callerNameSupported' => 'setCallerNameSupported',
        'directoryListingSupported' => 'setDirectoryListingSupported',
        'messagingSupported' => 'setMessagingSupported',
        'destinationType' => 'setDestinationType',
        'destination' => 'setDestination',
        'ref' => 'setRef',
        'callForwardingDestination' => 'setCallForwardingDestination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inUse' => 'getInUse',
        'name' => 'getName',
        'countryCode' => 'getCountryCode',
        'amount' => 'getAmount',
        'perMinuteRate' => 'getPerMinuteRate',
        'provider' => 'getProvider',
        'originalProvider' => 'getOriginalProvider',
        'providerOrderId' => 'getProviderOrderId',
        'fax' => 'getFax',
        'voice' => 'getVoice',
        'status' => 'getStatus',
        'sms' => 'getSms',
        'mms' => 'getMms',
        'changeRegionOrderId' => 'getChangeRegionOrderId',
        'changeRegionOrderDate' => 'getChangeRegionOrderDate',
        'directoryListing' => 'getDirectoryListing',
        'directoryListingOrderId' => 'getDirectoryListingOrderId',
        'directoryListingOrderDate' => 'getDirectoryListingOrderDate',
        'callerName' => 'getCallerName',
        'callerNameOrderId' => 'getCallerNameOrderId',
        'callerNameOrderDate' => 'getCallerNameOrderDate',
        'e911' => 'getE911',
        'e911OrderId' => 'getE911OrderId',
        'e911OrderDate' => 'getE911OrderDate',
        'messageCampaign' => 'getMessageCampaign',
        'messageClass' => 'getMessageClass',
        'messageType' => 'getMessageType',
        'messageCampaignOrderId' => 'getMessageCampaignOrderId',
        'messageCampaignOrderDate' => 'getMessageCampaignOrderDate',
        'e911Supported' => 'getE911Supported',
        'callerNameSupported' => 'getCallerNameSupported',
        'directoryListingSupported' => 'getDirectoryListingSupported',
        'messagingSupported' => 'getMessagingSupported',
        'destinationType' => 'getDestinationType',
        'destination' => 'getDestination',
        'ref' => 'getRef',
        'callForwardingDestination' => 'getCallForwardingDestination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IN_USE__1 = '1';
    public const IN_USE__0 = '0';
    public const FAX__1 = '1';
    public const FAX__0 = '0';
    public const VOICE__1 = '1';
    public const VOICE__0 = '0';
    public const STATUS__1 = '1';
    public const STATUS__0 = '0';
    public const SMS__1 = '1';
    public const SMS__0 = '0';
    public const MMS__1 = '1';
    public const MMS__0 = '0';
    public const MESSAGE_CLASS_P2_P = 'P2P';
    public const MESSAGE_CLASS_A2_PLC = 'A2PLC';
    public const MESSAGE_CLASS_A2_P8_XX = 'A2P8XX';
    public const MESSAGE_TYPE_SMS = 'SMS';
    public const MESSAGE_TYPE_MMS = 'MMS';
    public const MESSAGE_TYPE_SMSMMS = 'SMSMMS';
    public const MESSAGE_TYPE_SMS_ALT = 'SMS_ALT';
    public const MESSAGE_TYPE_MMS_ALT = 'MMS_ALT';
    public const MESSAGE_TYPE_SMSMMS_ALT = 'SMSMMS_ALT';
    public const E911_SUPPORTED__1 = '1';
    public const E911_SUPPORTED__0 = '0';
    public const CALLER_NAME_SUPPORTED__1 = '1';
    public const CALLER_NAME_SUPPORTED__0 = '0';
    public const DIRECTORY_LISTING_SUPPORTED__1 = '1';
    public const DIRECTORY_LISTING_SUPPORTED__0 = '0';
    public const MESSAGING_SUPPORTED__1 = '1';
    public const MESSAGING_SUPPORTED__0 = '0';
    public const DESTINATION_TYPE_ANNOUNCEMENTS = 'announcements';
    public const DESTINATION_TYPE_DIRECTORIES = 'directories';
    public const DESTINATION_TYPE_PARK = 'park';
    public const DESTINATION_TYPE_NUMBERS = 'numbers';
    public const DESTINATION_TYPE_MENUS = 'menus';
    public const DESTINATION_TYPE_USERS = 'users';
    public const DESTINATION_TYPE_SERVERS = 'servers';
    public const DESTINATION_TYPE_INBOUNDRULES = 'inboundrules';
    public const DESTINATION_TYPE_CALLQUEUES = 'callqueues';
    public const DESTINATION_TYPE_FAXACCOUNTS = 'faxaccounts';
    public const DESTINATION_TYPE_CALLFORWARDING = 'callforwarding';
    public const DESTINATION_TYPE_HANGUP = 'hangup';
    public const DESTINATION_TYPE_PHONEINBOUNDRULES = 'phoneinboundrules';
    public const DESTINATION_TYPE_VOICEMAILACCOUNTS = 'voicemailaccounts';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInUseAllowableValues()
    {
        return [
            self::IN_USE__1,
            self::IN_USE__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFaxAllowableValues()
    {
        return [
            self::FAX__1,
            self::FAX__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceAllowableValues()
    {
        return [
            self::VOICE__1,
            self::VOICE__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__1,
            self::STATUS__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsAllowableValues()
    {
        return [
            self::SMS__1,
            self::SMS__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMmsAllowableValues()
    {
        return [
            self::MMS__1,
            self::MMS__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageClassAllowableValues()
    {
        return [
            self::MESSAGE_CLASS_P2_P,
            self::MESSAGE_CLASS_A2_PLC,
            self::MESSAGE_CLASS_A2_P8_XX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_SMS,
            self::MESSAGE_TYPE_MMS,
            self::MESSAGE_TYPE_SMSMMS,
            self::MESSAGE_TYPE_SMS_ALT,
            self::MESSAGE_TYPE_MMS_ALT,
            self::MESSAGE_TYPE_SMSMMS_ALT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getE911SupportedAllowableValues()
    {
        return [
            self::E911_SUPPORTED__1,
            self::E911_SUPPORTED__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallerNameSupportedAllowableValues()
    {
        return [
            self::CALLER_NAME_SUPPORTED__1,
            self::CALLER_NAME_SUPPORTED__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectoryListingSupportedAllowableValues()
    {
        return [
            self::DIRECTORY_LISTING_SUPPORTED__1,
            self::DIRECTORY_LISTING_SUPPORTED__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessagingSupportedAllowableValues()
    {
        return [
            self::MESSAGING_SUPPORTED__1,
            self::MESSAGING_SUPPORTED__0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationTypeAllowableValues()
    {
        return [
            self::DESTINATION_TYPE_ANNOUNCEMENTS,
            self::DESTINATION_TYPE_DIRECTORIES,
            self::DESTINATION_TYPE_PARK,
            self::DESTINATION_TYPE_NUMBERS,
            self::DESTINATION_TYPE_MENUS,
            self::DESTINATION_TYPE_USERS,
            self::DESTINATION_TYPE_SERVERS,
            self::DESTINATION_TYPE_INBOUNDRULES,
            self::DESTINATION_TYPE_CALLQUEUES,
            self::DESTINATION_TYPE_FAXACCOUNTS,
            self::DESTINATION_TYPE_CALLFORWARDING,
            self::DESTINATION_TYPE_HANGUP,
            self::DESTINATION_TYPE_PHONEINBOUNDRULES,
            self::DESTINATION_TYPE_VOICEMAILACCOUNTS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inUse', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('perMinuteRate', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('originalProvider', $data ?? [], null);
        $this->setIfExists('providerOrderId', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('voice', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('sms', $data ?? [], null);
        $this->setIfExists('mms', $data ?? [], null);
        $this->setIfExists('changeRegionOrderId', $data ?? [], null);
        $this->setIfExists('changeRegionOrderDate', $data ?? [], null);
        $this->setIfExists('directoryListing', $data ?? [], null);
        $this->setIfExists('directoryListingOrderId', $data ?? [], null);
        $this->setIfExists('directoryListingOrderDate', $data ?? [], null);
        $this->setIfExists('callerName', $data ?? [], null);
        $this->setIfExists('callerNameOrderId', $data ?? [], null);
        $this->setIfExists('callerNameOrderDate', $data ?? [], null);
        $this->setIfExists('e911', $data ?? [], null);
        $this->setIfExists('e911OrderId', $data ?? [], null);
        $this->setIfExists('e911OrderDate', $data ?? [], null);
        $this->setIfExists('messageCampaign', $data ?? [], null);
        $this->setIfExists('messageClass', $data ?? [], null);
        $this->setIfExists('messageType', $data ?? [], null);
        $this->setIfExists('messageCampaignOrderId', $data ?? [], null);
        $this->setIfExists('messageCampaignOrderDate', $data ?? [], null);
        $this->setIfExists('e911Supported', $data ?? [], null);
        $this->setIfExists('callerNameSupported', $data ?? [], null);
        $this->setIfExists('directoryListingSupported', $data ?? [], null);
        $this->setIfExists('messagingSupported', $data ?? [], null);
        $this->setIfExists('destinationType', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('callForwardingDestination', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInUseAllowableValues();
        if (!is_null($this->container['inUse']) && !in_array($this->container['inUse'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inUse', must be one of '%s'",
                $this->container['inUse'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 20)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['name']) < 10)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ((mb_strlen($this->container['countryCode']) > 4)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['countryCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        if (!is_null($this->container['providerOrderId']) && (mb_strlen($this->container['providerOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'providerOrderId', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getFaxAllowableValues();
        if (!is_null($this->container['fax']) && !in_array($this->container['fax'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fax', must be one of '%s'",
                $this->container['fax'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoiceAllowableValues();
        if (!is_null($this->container['voice']) && !in_array($this->container['voice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voice', must be one of '%s'",
                $this->container['voice'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmsAllowableValues();
        if (!is_null($this->container['sms']) && !in_array($this->container['sms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sms', must be one of '%s'",
                $this->container['sms'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMmsAllowableValues();
        if (!is_null($this->container['mms']) && !in_array($this->container['mms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mms', must be one of '%s'",
                $this->container['mms'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['changeRegionOrderId']) && (mb_strlen($this->container['changeRegionOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'changeRegionOrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['changeRegionOrderId']) && (mb_strlen($this->container['changeRegionOrderId']) < 5)) {
            $invalidProperties[] = "invalid value for 'changeRegionOrderId', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['directoryListingOrderId']) && (mb_strlen($this->container['directoryListingOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'directoryListingOrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['directoryListingOrderId']) && (mb_strlen($this->container['directoryListingOrderId']) < 5)) {
            $invalidProperties[] = "invalid value for 'directoryListingOrderId', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['callerName']) && (mb_strlen($this->container['callerName']) > 45)) {
            $invalidProperties[] = "invalid value for 'callerName', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['callerNameOrderId']) && (mb_strlen($this->container['callerNameOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'callerNameOrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['e911OrderId']) && (mb_strlen($this->container['e911OrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'e911OrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['e911OrderId']) && (mb_strlen($this->container['e911OrderId']) < 5)) {
            $invalidProperties[] = "invalid value for 'e911OrderId', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['messageCampaign']) && (mb_strlen($this->container['messageCampaign']) > 45)) {
            $invalidProperties[] = "invalid value for 'messageCampaign', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getMessageClassAllowableValues();
        if (!is_null($this->container['messageClass']) && !in_array($this->container['messageClass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'messageClass', must be one of '%s'",
                $this->container['messageClass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['messageType']) && !in_array($this->container['messageType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'messageType', must be one of '%s'",
                $this->container['messageType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['messageCampaignOrderId']) && (mb_strlen($this->container['messageCampaignOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'messageCampaignOrderId', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getE911SupportedAllowableValues();
        if (!is_null($this->container['e911Supported']) && !in_array($this->container['e911Supported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'e911Supported', must be one of '%s'",
                $this->container['e911Supported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCallerNameSupportedAllowableValues();
        if (!is_null($this->container['callerNameSupported']) && !in_array($this->container['callerNameSupported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'callerNameSupported', must be one of '%s'",
                $this->container['callerNameSupported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectoryListingSupportedAllowableValues();
        if (!is_null($this->container['directoryListingSupported']) && !in_array($this->container['directoryListingSupported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'directoryListingSupported', must be one of '%s'",
                $this->container['directoryListingSupported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessagingSupportedAllowableValues();
        if (!is_null($this->container['messagingSupported']) && !in_array($this->container['messagingSupported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'messagingSupported', must be one of '%s'",
                $this->container['messagingSupported'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['destinationType'] === null) {
            $invalidProperties[] = "'destinationType' can't be null";
        }
        $allowedValues = $this->getDestinationTypeAllowableValues();
        if (!is_null($this->container['destinationType']) && !in_array($this->container['destinationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'destinationType', must be one of '%s'",
                $this->container['destinationType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ref']) && (mb_strlen($this->container['ref']) > 100)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['ref']) && (mb_strlen($this->container['ref']) < 5)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['callForwardingDestination']) && (mb_strlen($this->container['callForwardingDestination']) > 45)) {
            $invalidProperties[] = "invalid value for 'callForwardingDestination', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['callForwardingDestination']) && (mb_strlen($this->container['callForwardingDestination']) < 10)) {
            $invalidProperties[] = "invalid value for 'callForwardingDestination', the character length must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inUse
     *
     * @return mixed|null
     */
    public function getInUse()
    {
        return $this->container['inUse'];
    }

    /**
     * Sets inUse
     *
     * @param mixed|null $inUse inUse
     *
     * @return self
     */
    public function setInUse($inUse)
    {
        if (is_null($inUse)) {
            array_push($this->openAPINullablesSetToNull, 'inUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inUse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getInUseAllowableValues();
        if (!is_null($inUse) && !in_array($inUse, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inUse', must be one of '%s'",
                    $inUse,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inUse'] = $inUse;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Numbers., must be smaller than or equal to 20.');
        }
        if (!is_null($name) && (mb_strlen($name) < 10)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Numbers., must be bigger than or equal to 10.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return mixed
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param mixed $countryCode countryCode
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            array_push($this->openAPINullablesSetToNull, 'countryCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countryCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($countryCode) && (mb_strlen($countryCode) > 4)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling Numbers., must be smaller than or equal to 4.');
        }
        if (!is_null($countryCode) && (mb_strlen($countryCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling Numbers., must be bigger than or equal to 1.');
        }

        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return mixed|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param mixed|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets perMinuteRate
     *
     * @return mixed|null
     */
    public function getPerMinuteRate()
    {
        return $this->container['perMinuteRate'];
    }

    /**
     * Sets perMinuteRate
     *
     * @param mixed|null $perMinuteRate perMinuteRate
     *
     * @return self
     */
    public function setPerMinuteRate($perMinuteRate)
    {
        if (is_null($perMinuteRate)) {
            array_push($this->openAPINullablesSetToNull, 'perMinuteRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('perMinuteRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['perMinuteRate'] = $perMinuteRate;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return mixed
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param mixed $provider ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            array_push($this->openAPINullablesSetToNull, 'provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets originalProvider
     *
     * @return mixed|null
     */
    public function getOriginalProvider()
    {
        return $this->container['originalProvider'];
    }

    /**
     * Sets originalProvider
     *
     * @param mixed|null $originalProvider ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setOriginalProvider($originalProvider)
    {
        if (is_null($originalProvider)) {
            array_push($this->openAPINullablesSetToNull, 'originalProvider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalProvider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalProvider'] = $originalProvider;

        return $this;
    }

    /**
     * Gets providerOrderId
     *
     * @return mixed|null
     */
    public function getProviderOrderId()
    {
        return $this->container['providerOrderId'];
    }

    /**
     * Sets providerOrderId
     *
     * @param mixed|null $providerOrderId providerOrderId
     *
     * @return self
     */
    public function setProviderOrderId($providerOrderId)
    {
        if (is_null($providerOrderId)) {
            array_push($this->openAPINullablesSetToNull, 'providerOrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('providerOrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($providerOrderId) && (mb_strlen($providerOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $providerOrderId when calling Numbers., must be smaller than or equal to 45.');
        }

        $this->container['providerOrderId'] = $providerOrderId;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return mixed|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param mixed|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFaxAllowableValues();
        if (!is_null($fax) && !in_array($fax, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fax', must be one of '%s'",
                    $fax,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return mixed|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param mixed|null $voice voice
     *
     * @return self
     */
    public function setVoice($voice)
    {
        if (is_null($voice)) {
            array_push($this->openAPINullablesSetToNull, 'voice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getVoiceAllowableValues();
        if (!is_null($voice) && !in_array($voice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voice', must be one of '%s'",
                    $voice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice'] = $voice;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return mixed|null
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param mixed|null $sms sms
     *
     * @return self
     */
    public function setSms($sms)
    {
        if (is_null($sms)) {
            array_push($this->openAPINullablesSetToNull, 'sms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSmsAllowableValues();
        if (!is_null($sms) && !in_array($sms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sms', must be one of '%s'",
                    $sms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets mms
     *
     * @return mixed|null
     */
    public function getMms()
    {
        return $this->container['mms'];
    }

    /**
     * Sets mms
     *
     * @param mixed|null $mms mms
     *
     * @return self
     */
    public function setMms($mms)
    {
        if (is_null($mms)) {
            array_push($this->openAPINullablesSetToNull, 'mms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMmsAllowableValues();
        if (!is_null($mms) && !in_array($mms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mms', must be one of '%s'",
                    $mms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mms'] = $mms;

        return $this;
    }

    /**
     * Gets changeRegionOrderId
     *
     * @return mixed|null
     */
    public function getChangeRegionOrderId()
    {
        return $this->container['changeRegionOrderId'];
    }

    /**
     * Sets changeRegionOrderId
     *
     * @param mixed|null $changeRegionOrderId changeRegionOrderId
     *
     * @return self
     */
    public function setChangeRegionOrderId($changeRegionOrderId)
    {
        if (is_null($changeRegionOrderId)) {
            array_push($this->openAPINullablesSetToNull, 'changeRegionOrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changeRegionOrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($changeRegionOrderId) && (mb_strlen($changeRegionOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $changeRegionOrderId when calling Numbers., must be smaller than or equal to 45.');
        }
        if (!is_null($changeRegionOrderId) && (mb_strlen($changeRegionOrderId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $changeRegionOrderId when calling Numbers., must be bigger than or equal to 5.');
        }

        $this->container['changeRegionOrderId'] = $changeRegionOrderId;

        return $this;
    }

    /**
     * Gets changeRegionOrderDate
     *
     * @return mixed|null
     */
    public function getChangeRegionOrderDate()
    {
        return $this->container['changeRegionOrderDate'];
    }

    /**
     * Sets changeRegionOrderDate
     *
     * @param mixed|null $changeRegionOrderDate changeRegionOrderDate
     *
     * @return self
     */
    public function setChangeRegionOrderDate($changeRegionOrderDate)
    {
        if (is_null($changeRegionOrderDate)) {
            array_push($this->openAPINullablesSetToNull, 'changeRegionOrderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changeRegionOrderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['changeRegionOrderDate'] = $changeRegionOrderDate;

        return $this;
    }

    /**
     * Gets directoryListing
     *
     * @return mixed|null
     */
    public function getDirectoryListing()
    {
        return $this->container['directoryListing'];
    }

    /**
     * Sets directoryListing
     *
     * @param mixed|null $directoryListing ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setDirectoryListing($directoryListing)
    {
        if (is_null($directoryListing)) {
            array_push($this->openAPINullablesSetToNull, 'directoryListing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directoryListing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directoryListing'] = $directoryListing;

        return $this;
    }

    /**
     * Gets directoryListingOrderId
     *
     * @return mixed|null
     */
    public function getDirectoryListingOrderId()
    {
        return $this->container['directoryListingOrderId'];
    }

    /**
     * Sets directoryListingOrderId
     *
     * @param mixed|null $directoryListingOrderId directoryListingOrderId
     *
     * @return self
     */
    public function setDirectoryListingOrderId($directoryListingOrderId)
    {
        if (is_null($directoryListingOrderId)) {
            array_push($this->openAPINullablesSetToNull, 'directoryListingOrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directoryListingOrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($directoryListingOrderId) && (mb_strlen($directoryListingOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $directoryListingOrderId when calling Numbers., must be smaller than or equal to 45.');
        }
        if (!is_null($directoryListingOrderId) && (mb_strlen($directoryListingOrderId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $directoryListingOrderId when calling Numbers., must be bigger than or equal to 5.');
        }

        $this->container['directoryListingOrderId'] = $directoryListingOrderId;

        return $this;
    }

    /**
     * Gets directoryListingOrderDate
     *
     * @return mixed|null
     */
    public function getDirectoryListingOrderDate()
    {
        return $this->container['directoryListingOrderDate'];
    }

    /**
     * Sets directoryListingOrderDate
     *
     * @param mixed|null $directoryListingOrderDate directoryListingOrderDate
     *
     * @return self
     */
    public function setDirectoryListingOrderDate($directoryListingOrderDate)
    {
        if (is_null($directoryListingOrderDate)) {
            array_push($this->openAPINullablesSetToNull, 'directoryListingOrderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directoryListingOrderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directoryListingOrderDate'] = $directoryListingOrderDate;

        return $this;
    }

    /**
     * Gets callerName
     *
     * @return mixed|null
     */
    public function getCallerName()
    {
        return $this->container['callerName'];
    }

    /**
     * Sets callerName
     *
     * @param mixed|null $callerName callerName
     *
     * @return self
     */
    public function setCallerName($callerName)
    {
        if (is_null($callerName)) {
            array_push($this->openAPINullablesSetToNull, 'callerName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callerName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($callerName) && (mb_strlen($callerName) > 45)) {
            throw new \InvalidArgumentException('invalid length for $callerName when calling Numbers., must be smaller than or equal to 45.');
        }

        $this->container['callerName'] = $callerName;

        return $this;
    }

    /**
     * Gets callerNameOrderId
     *
     * @return mixed|null
     */
    public function getCallerNameOrderId()
    {
        return $this->container['callerNameOrderId'];
    }

    /**
     * Sets callerNameOrderId
     *
     * @param mixed|null $callerNameOrderId callerNameOrderId
     *
     * @return self
     */
    public function setCallerNameOrderId($callerNameOrderId)
    {
        if (is_null($callerNameOrderId)) {
            array_push($this->openAPINullablesSetToNull, 'callerNameOrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callerNameOrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($callerNameOrderId) && (mb_strlen($callerNameOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $callerNameOrderId when calling Numbers., must be smaller than or equal to 45.');
        }

        $this->container['callerNameOrderId'] = $callerNameOrderId;

        return $this;
    }

    /**
     * Gets callerNameOrderDate
     *
     * @return mixed|null
     */
    public function getCallerNameOrderDate()
    {
        return $this->container['callerNameOrderDate'];
    }

    /**
     * Sets callerNameOrderDate
     *
     * @param mixed|null $callerNameOrderDate callerNameOrderDate
     *
     * @return self
     */
    public function setCallerNameOrderDate($callerNameOrderDate)
    {
        if (is_null($callerNameOrderDate)) {
            array_push($this->openAPINullablesSetToNull, 'callerNameOrderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callerNameOrderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callerNameOrderDate'] = $callerNameOrderDate;

        return $this;
    }

    /**
     * Gets e911
     *
     * @return mixed|null
     */
    public function getE911()
    {
        return $this->container['e911'];
    }

    /**
     * Sets e911
     *
     * @param mixed|null $e911 ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setE911($e911)
    {
        if (is_null($e911)) {
            array_push($this->openAPINullablesSetToNull, 'e911');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e911', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e911'] = $e911;

        return $this;
    }

    /**
     * Gets e911OrderId
     *
     * @return mixed|null
     */
    public function getE911OrderId()
    {
        return $this->container['e911OrderId'];
    }

    /**
     * Sets e911OrderId
     *
     * @param mixed|null $e911OrderId e911OrderId
     *
     * @return self
     */
    public function setE911OrderId($e911OrderId)
    {
        if (is_null($e911OrderId)) {
            array_push($this->openAPINullablesSetToNull, 'e911OrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e911OrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($e911OrderId) && (mb_strlen($e911OrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $e911OrderId when calling Numbers., must be smaller than or equal to 45.');
        }
        if (!is_null($e911OrderId) && (mb_strlen($e911OrderId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $e911OrderId when calling Numbers., must be bigger than or equal to 5.');
        }

        $this->container['e911OrderId'] = $e911OrderId;

        return $this;
    }

    /**
     * Gets e911OrderDate
     *
     * @return mixed|null
     */
    public function getE911OrderDate()
    {
        return $this->container['e911OrderDate'];
    }

    /**
     * Sets e911OrderDate
     *
     * @param mixed|null $e911OrderDate e911OrderDate
     *
     * @return self
     */
    public function setE911OrderDate($e911OrderDate)
    {
        if (is_null($e911OrderDate)) {
            array_push($this->openAPINullablesSetToNull, 'e911OrderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e911OrderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e911OrderDate'] = $e911OrderDate;

        return $this;
    }

    /**
     * Gets messageCampaign
     *
     * @return mixed|null
     */
    public function getMessageCampaign()
    {
        return $this->container['messageCampaign'];
    }

    /**
     * Sets messageCampaign
     *
     * @param mixed|null $messageCampaign ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setMessageCampaign($messageCampaign)
    {
        if (is_null($messageCampaign)) {
            array_push($this->openAPINullablesSetToNull, 'messageCampaign');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messageCampaign', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($messageCampaign) && (mb_strlen($messageCampaign) > 45)) {
            throw new \InvalidArgumentException('invalid length for $messageCampaign when calling Numbers., must be smaller than or equal to 45.');
        }

        $this->container['messageCampaign'] = $messageCampaign;

        return $this;
    }

    /**
     * Gets messageClass
     *
     * @return mixed|null
     */
    public function getMessageClass()
    {
        return $this->container['messageClass'];
    }

    /**
     * Sets messageClass
     *
     * @param mixed|null $messageClass messageClass
     *
     * @return self
     */
    public function setMessageClass($messageClass)
    {
        if (is_null($messageClass)) {
            array_push($this->openAPINullablesSetToNull, 'messageClass');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messageClass', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMessageClassAllowableValues();
        if (!is_null($messageClass) && !in_array($messageClass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'messageClass', must be one of '%s'",
                    $messageClass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageClass'] = $messageClass;

        return $this;
    }

    /**
     * Gets messageType
     *
     * @return mixed|null
     */
    public function getMessageType()
    {
        return $this->container['messageType'];
    }

    /**
     * Sets messageType
     *
     * @param mixed|null $messageType messageType
     *
     * @return self
     */
    public function setMessageType($messageType)
    {
        if (is_null($messageType)) {
            array_push($this->openAPINullablesSetToNull, 'messageType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messageType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($messageType) && !in_array($messageType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'messageType', must be one of '%s'",
                    $messageType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageType'] = $messageType;

        return $this;
    }

    /**
     * Gets messageCampaignOrderId
     *
     * @return mixed|null
     */
    public function getMessageCampaignOrderId()
    {
        return $this->container['messageCampaignOrderId'];
    }

    /**
     * Sets messageCampaignOrderId
     *
     * @param mixed|null $messageCampaignOrderId messageCampaignOrderId
     *
     * @return self
     */
    public function setMessageCampaignOrderId($messageCampaignOrderId)
    {
        if (is_null($messageCampaignOrderId)) {
            array_push($this->openAPINullablesSetToNull, 'messageCampaignOrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messageCampaignOrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($messageCampaignOrderId) && (mb_strlen($messageCampaignOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $messageCampaignOrderId when calling Numbers., must be smaller than or equal to 45.');
        }

        $this->container['messageCampaignOrderId'] = $messageCampaignOrderId;

        return $this;
    }

    /**
     * Gets messageCampaignOrderDate
     *
     * @return mixed|null
     */
    public function getMessageCampaignOrderDate()
    {
        return $this->container['messageCampaignOrderDate'];
    }

    /**
     * Sets messageCampaignOrderDate
     *
     * @param mixed|null $messageCampaignOrderDate messageCampaignOrderDate
     *
     * @return self
     */
    public function setMessageCampaignOrderDate($messageCampaignOrderDate)
    {
        if (is_null($messageCampaignOrderDate)) {
            array_push($this->openAPINullablesSetToNull, 'messageCampaignOrderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messageCampaignOrderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messageCampaignOrderDate'] = $messageCampaignOrderDate;

        return $this;
    }

    /**
     * Gets e911Supported
     *
     * @return mixed|null
     */
    public function getE911Supported()
    {
        return $this->container['e911Supported'];
    }

    /**
     * Sets e911Supported
     *
     * @param mixed|null $e911Supported e911Supported
     *
     * @return self
     */
    public function setE911Supported($e911Supported)
    {
        if (is_null($e911Supported)) {
            array_push($this->openAPINullablesSetToNull, 'e911Supported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e911Supported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getE911SupportedAllowableValues();
        if (!is_null($e911Supported) && !in_array($e911Supported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'e911Supported', must be one of '%s'",
                    $e911Supported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['e911Supported'] = $e911Supported;

        return $this;
    }

    /**
     * Gets callerNameSupported
     *
     * @return mixed|null
     */
    public function getCallerNameSupported()
    {
        return $this->container['callerNameSupported'];
    }

    /**
     * Sets callerNameSupported
     *
     * @param mixed|null $callerNameSupported callerNameSupported
     *
     * @return self
     */
    public function setCallerNameSupported($callerNameSupported)
    {
        if (is_null($callerNameSupported)) {
            array_push($this->openAPINullablesSetToNull, 'callerNameSupported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callerNameSupported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCallerNameSupportedAllowableValues();
        if (!is_null($callerNameSupported) && !in_array($callerNameSupported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'callerNameSupported', must be one of '%s'",
                    $callerNameSupported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['callerNameSupported'] = $callerNameSupported;

        return $this;
    }

    /**
     * Gets directoryListingSupported
     *
     * @return mixed|null
     */
    public function getDirectoryListingSupported()
    {
        return $this->container['directoryListingSupported'];
    }

    /**
     * Sets directoryListingSupported
     *
     * @param mixed|null $directoryListingSupported directoryListingSupported
     *
     * @return self
     */
    public function setDirectoryListingSupported($directoryListingSupported)
    {
        if (is_null($directoryListingSupported)) {
            array_push($this->openAPINullablesSetToNull, 'directoryListingSupported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directoryListingSupported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDirectoryListingSupportedAllowableValues();
        if (!is_null($directoryListingSupported) && !in_array($directoryListingSupported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'directoryListingSupported', must be one of '%s'",
                    $directoryListingSupported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['directoryListingSupported'] = $directoryListingSupported;

        return $this;
    }

    /**
     * Gets messagingSupported
     *
     * @return mixed|null
     */
    public function getMessagingSupported()
    {
        return $this->container['messagingSupported'];
    }

    /**
     * Sets messagingSupported
     *
     * @param mixed|null $messagingSupported messagingSupported
     *
     * @return self
     */
    public function setMessagingSupported($messagingSupported)
    {
        if (is_null($messagingSupported)) {
            array_push($this->openAPINullablesSetToNull, 'messagingSupported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagingSupported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMessagingSupportedAllowableValues();
        if (!is_null($messagingSupported) && !in_array($messagingSupported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'messagingSupported', must be one of '%s'",
                    $messagingSupported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messagingSupported'] = $messagingSupported;

        return $this;
    }

    /**
     * Gets destinationType
     *
     * @return mixed
     */
    public function getDestinationType()
    {
        return $this->container['destinationType'];
    }

    /**
     * Sets destinationType
     *
     * @param mixed $destinationType destinationType
     *
     * @return self
     */
    public function setDestinationType($destinationType)
    {
        if (is_null($destinationType)) {
            array_push($this->openAPINullablesSetToNull, 'destinationType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destinationType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDestinationTypeAllowableValues();
        if (!is_null($destinationType) && !in_array($destinationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'destinationType', must be one of '%s'",
                    $destinationType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destinationType'] = $destinationType;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return mixed|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param mixed|null $destination ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            array_push($this->openAPINullablesSetToNull, 'destination');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return mixed|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param mixed|null $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            array_push($this->openAPINullablesSetToNull, 'ref');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref) && (mb_strlen($ref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $ref when calling Numbers., must be smaller than or equal to 100.');
        }
        if (!is_null($ref) && (mb_strlen($ref) < 5)) {
            throw new \InvalidArgumentException('invalid length for $ref when calling Numbers., must be bigger than or equal to 5.');
        }

        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets callForwardingDestination
     *
     * @return mixed|null
     */
    public function getCallForwardingDestination()
    {
        return $this->container['callForwardingDestination'];
    }

    /**
     * Sets callForwardingDestination
     *
     * @param mixed|null $callForwardingDestination callForwardingDestination
     *
     * @return self
     */
    public function setCallForwardingDestination($callForwardingDestination)
    {
        if (is_null($callForwardingDestination)) {
            array_push($this->openAPINullablesSetToNull, 'callForwardingDestination');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callForwardingDestination', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($callForwardingDestination) && (mb_strlen($callForwardingDestination) > 45)) {
            throw new \InvalidArgumentException('invalid length for $callForwardingDestination when calling Numbers., must be smaller than or equal to 45.');
        }
        if (!is_null($callForwardingDestination) && (mb_strlen($callForwardingDestination) < 10)) {
            throw new \InvalidArgumentException('invalid length for $callForwardingDestination when calling Numbers., must be bigger than or equal to 10.');
        }

        $this->container['callForwardingDestination'] = $callForwardingDestination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


